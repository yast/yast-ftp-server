/**
 * File:	include/ftpd/write_load.ycp
 * Package:	Configuration of ftpd
 * Summary:	Wizards definitions
 * Authors:	Jozef Uhliarik <juhliarik@suse.cz>
 *
 * $Id: write_load.ycp 27914 2006-02-13 14:32:08Z juhliarik $
 */

{

textdomain "ftp-server";

import "Service";
import "Popup";
import "Inetd";
import "Progress";




boolean IdFTPXinetd () {
  boolean old_progress = Progress::set (false);
  boolean ret = Inetd::Read();     
  Progress::set (old_progress);
  if (ret) {
     string value = "";
     integer i = 0;
     string ids = "";
     while (size(Inetd::netd_conf) > i) {        				     	       
       ids = tostring( Inetd::netd_conf[i,"iid"]:nil);
       if (regexpmatch(ids, "vsftpd"))
	  FtpServer::vsftpd_xined_id = i;
       else if (regexpmatch(ids, "pure-ftpd"))
          FtpServer::pureftpd_xined_id = i;		
       i=i+1;
       	  			
     } // while (size(Inetd::netd_conf) > i) {
     if (FtpServer::pureftpd_xined_id > -1) {
        string server_args = (string) Inetd::netd_conf[FtpServer::pureftpd_xined_id,"server_args"]:nil;
	FtpServer::pure_ftpd_xinet_conf = splitstring(server_args, " ");
        y2milestone("-------------PURE_SETTINGS_XINETD-------------------");  
        y2milestone("pure-ftpd configuration has been read from xinetd: %1", pure_ftpd_xinet_conf);
        y2milestone("----------------------------------------------------");        
     }
     return true;
  } else
     return false;

}

boolean SettingsXinetdPure (list <string> server_args) {
  string option = "";
  y2milestone("---------------boolean SettingsXinetdPure (list <string> server_args)-----------------");  
  y2milestone("----------------------------------------------------"); 

  //bnc#597842 Yast2-ftp-server module losses the chroot everyone (chroot-local-user) setting
  if ((FtpServer::vsftpd_edit) || (size(pure_ftpd_xinet_conf) == 0))
  {
     y2milestone("skip SettingsXinetdPure() -> vsftpd is used or pure_ftpd_xinet_conf is empty");
     return true;
  }

  //ChrootEnable
  option = find(string opt, pure_ftpd_xinet_conf, ``(opt == "-A"));
  if (option != nil)
     FtpServer::EDIT_SETTINGS["ChrootEnable"] = (("-A" == option)? "YES": "NO");
  else
     FtpServer::EDIT_SETTINGS["ChrootEnable"] = "NO";

  //VerboseLogging
  option = find(string opt, pure_ftpd_xinet_conf, ``(opt == "-d"));
  if (option != nil)
     FtpServer::EDIT_SETTINGS["VerboseLogging"] = (("-d" == option)? "YES": "NO");
  else
     FtpServer::EDIT_SETTINGS["VerboseLogging"] = "NO";

  //AnonReadOnly
  option = find(string opt, pure_ftpd_xinet_conf, ``(opt == "-i"));
  if (option != nil)
     FtpServer::EDIT_SETTINGS["AnonReadOnly"] = (("-i" == option)? "YES": "NO");
  else
    FtpServer::EDIT_SETTINGS["AnonReadOnly"] = "YES"; 

  //AnonCreatDirs
  option = find(string opt, pure_ftpd_xinet_conf, ``(opt == "-M"));
  if (option != nil)
     FtpServer::EDIT_SETTINGS["AnonCreatDirs"] = (("-M" == option)? "YES": "NO");
  else
     FtpServer::EDIT_SETTINGS["AnonCreatDirs"] = "NO";

  //AntiWarez
  option = find(string opt, pure_ftpd_xinet_conf, ``(opt == "-s"));
  if (option != nil)
     FtpServer::EDIT_SETTINGS["AntiWarez"] = (("-s" == option)? "YES": "NO");
  else
     FtpServer::EDIT_SETTINGS["AntiWarez"] = "NO";
  //AnonAuthen
  string yes_no ="";
  integer authen = 0;  
  yes_no = (((nil != find(string opt, pure_ftpd_xinet_conf, ``(opt == "-e"))))? "YES": "NO");
  if (yes_no == "YES")
     authen = 0;
  else
     authen = 1;
  yes_no = "";  
  yes_no = (((nil != find(string opt, pure_ftpd_xinet_conf, ``(opt == "-E"))))? "YES": "NO");
  if (yes_no == "YES")
     authen = authen + 2;
  if (authen == 0)
     FtpServer::EDIT_SETTINGS["AnonAuthen"] = "0";
  else
     FtpServer::EDIT_SETTINGS["AnonAuthen"] = (authen == 3 ? "2":"1");
  //numeric and string options
  
  
  //Umask
  option = find(string opt, pure_ftpd_xinet_conf, ``(issubstring(opt,"-U")));
  if (option != nil)
     option = substring(tostring(option),2);
  FtpServer::EDIT_SETTINGS["Umask"] = ((option != nil) ? option:"");
     
  //SSL
  
  option = find(string opt, pure_ftpd_xinet_conf, ``(issubstring(opt,"-Y")));
  if (option != nil)
     option = substring(tostring(option),2);
  FtpServer::EDIT_SETTINGS["SSL"] = ((option != nil) ? option:"1");
    
  //AnonMaxRate
  option = find(string opt, pure_ftpd_xinet_conf, ``(issubstring(opt,"-t")));
  if (option != nil)
     option = substring(tostring(option),2);
  FtpServer::EDIT_SETTINGS["AnonMaxRate"] = ((option != nil) ? option:"0");
    
  //LocalMaxRate
  option = find(string opt, pure_ftpd_xinet_conf, ``(issubstring(opt,"-T")));
  if (option != nil)
     option = substring(tostring(option),2);
  FtpServer::EDIT_SETTINGS["LocalMaxRate"] = ((option != nil) ? option:"0");
    
  //MaxClientsNumber
  option = find(string opt, pure_ftpd_xinet_conf, ``(issubstring(opt,"-c")));
  if (option != nil)
     option = substring(tostring(option),2);
  FtpServer::EDIT_SETTINGS["MaxClientsNumber"] = ((option != nil) ? option:"10");

  //MaxClientsPerIP
  option = find(string opt, pure_ftpd_xinet_conf, ``(issubstring(opt,"-C")));
  if (option != nil)
     option = substring(tostring(option),2);
  FtpServer::EDIT_SETTINGS["MaxClientsPerIP"] = ((option != nil) ? option:"3");

  //MaxIdleTime  
  option = find(string opt, pure_ftpd_xinet_conf, ``(issubstring(opt,"-I")));
  if (option != nil)
     option = substring(tostring(option),2);
  FtpServer::EDIT_SETTINGS["MaxIdleTime"] = ((option != nil) ? option:"15");

  //PasMinPort and PasMaxPort
  option = find(string opt, pure_ftpd_xinet_conf, ``(issubstring(opt,"-p")));
  if (option != nil) {
     option = substring(tostring(option),2);
     option = filterchars(option,"0123456789:");
  }
  if (option != nil) {
     list <string> ports = [];
     ports = splitstring(option,":");
     if (size(ports)==2) {
        FtpServer::EDIT_SETTINGS["PasMinPort"] = ports[0]:"";
        FtpServer::EDIT_SETTINGS["PasMaxPort"] = ports[1]:""; 
     } else {
        FtpServer::EDIT_SETTINGS["PasMinPort"] = FtpServer::DEFAULT_CONFIG["PasMinPort"]:nil;
        FtpServer::EDIT_SETTINGS["PasMaxPort"] = FtpServer::DEFAULT_CONFIG["PasMaxPort"]:nil;
     }
  } else {
     FtpServer::EDIT_SETTINGS["PasMinPort"] = FtpServer::DEFAULT_CONFIG["PasMinPort"]:nil;
     FtpServer::EDIT_SETTINGS["PasMaxPort"] = FtpServer::DEFAULT_CONFIG["PasMaxPort"]:nil;    
  }

  
  //VirtualUser
  option = find(string opt, pure_ftpd_xinet_conf, ``(issubstring(opt,"-l")));
  if (option != nil)
     option = substring(tostring(option),2);
  if (option != nil) {
     if (-1 != find(option, "puredb"))
        FtpServer::EDIT_SETTINGS["VirtualUser"] = "YES";    
  } else {
     FtpServer::EDIT_SETTINGS["VirtualUser"] = "NO";  
  }


  return true;


}


global string PureSettingsForXinetd () {
  string result = "";
    
  if (FtpServer::EDIT_SETTINGS["ChrootEnable"]:nil == "YES")
     result = "-A ";

  if (FtpServer::EDIT_SETTINGS["VerboseLogging"]:nil == "YES")
     result = result + "-d ";

  if (FtpServer::EDIT_SETTINGS["AnonReadOnly"]:nil == "YES")
     result = result + "-i ";

  if (FtpServer::EDIT_SETTINGS["AnonCreatDirs"]:nil == "YES")
     result = result + "-M "; 

  if (FtpServer::EDIT_SETTINGS["AntiWarez"]:nil == "YES")
     result = result + "-s ";
  
  //anonymous only
  if (FtpServer::EDIT_SETTINGS["AnonAuthen"]:nil == "0")
     result = result + "-e ";
  
  //local only
  if (FtpServer::EDIT_SETTINGS["AnonAuthen"]:nil == "1")
     result = result + "-E ";

  //both
  if (FtpServer::EDIT_SETTINGS["AnonAuthen"]:nil == "2")
     result = result + "-e -E ";

  if (FtpServer::EDIT_SETTINGS["Umask"]:nil != "")
     result = result + "-U "+ FtpServer::EDIT_SETTINGS["Umask"]:nil;
 
  //SSL
  if (FtpServer::EDIT_SETTINGS["SSL"]:nil != "")
     result = result +"-Y"+ FtpServer::EDIT_SETTINGS["SSL"]:nil +" ";

  //anonymous rate
  if (FtpServer::EDIT_SETTINGS["AnonMaxRate"]:nil != "0")
     result = result +"-t" + FtpServer::EDIT_SETTINGS["AnonMaxRate"]:nil +" ";

  //local rate   
  if (FtpServer::EDIT_SETTINGS["LocalMaxRate"]:nil != "0")
     result = result +"-T" + FtpServer::EDIT_SETTINGS["LocalMaxRate"]:nil +" ";

  //max clients  
  if (FtpServer::EDIT_SETTINGS["MaxClientsNumber"]:nil != "")
     result = result +"-c" + FtpServer::EDIT_SETTINGS["MaxClientsNumber"]:nil +" ";

  //max clients per IP
  if (FtpServer::EDIT_SETTINGS["MaxClientsPerIP"]:nil != "")
     result = result +"-C" + FtpServer::EDIT_SETTINGS["MaxClientsPerIP"]:nil +" ";

  //max idle time
  if (FtpServer::EDIT_SETTINGS["MaxIdleTime"]:nil != "")
     result = result +"-I" + FtpServer::EDIT_SETTINGS["MaxIdleTime"]:nil +" ";

  //port range for passive connections
  result = result + "-p"+FtpServer::EDIT_SETTINGS["PasMinPort"]:nil+":"+FtpServer::EDIT_SETTINGS["PasMaxPort"]:nil;

  y2milestone("[ftp-server] (PureSettingsForXinetd) options for xinetd from pure-ftpd settings: %1", result);  
  return result;
}


boolean InitStartViaXinetd () {
  boolean xinetd_running = false;
  if (IdFTPXinetd ()) {

     if (Service::Status("xinetd") == 0) {
        xinetd_running = true;
        FtpServer::EDIT_SETTINGS["StartXinetd"] = "YES";
     }
     if (FtpServer::vsftpd_edit) {		 
        if (Inetd::netd_conf[FtpServer::vsftpd_xined_id,"enabled"]:nil == true) {
           FtpServer::EDIT_SETTINGS["StartDaemon"] = "2"; 
           if (xinetd_running)           
              FtpServer::vsftp_xinetd_running = true;
           return true;
        }
     } else {
        if (Inetd::netd_conf[FtpServer::pureftpd_xined_id,"enabled"]:nil == true) {
           FtpServer::EDIT_SETTINGS["StartDaemon"] = "2";
           if (xinetd_running)
              FtpServer::pure_ftp_xinetd_running = true;
           return true;
        }
     }
     
  } else //end of if (IdFTPXined ())]
     return false;
}


global boolean WriteStartViaXinetd (boolean startxinetd, boolean push_star_now) { 
  string pure_options = "";
  boolean result = false;

  if ((FtpServer::EDIT_SETTINGS["StartDaemon"]:nil == "2") && (!FtpServer::stop_daemon_xinetd)) {

     if (FtpServer::vsftpd_edit) {
        Inetd::netd_conf[FtpServer::vsftpd_xined_id,"enabled"] = true;
        Inetd::netd_conf[FtpServer::pureftpd_xined_id,"enabled"] = false;
        FtpServer::pure_ftp_xinetd_running = false;
     } else {
        Inetd::netd_conf[FtpServer::pureftpd_xined_id,"enabled"] = true;
        Inetd::netd_conf[FtpServer::vsftpd_xined_id,"enabled"] = false;
        FtpServer::vsftp_xinetd_running = false;
        if (push_star_now) {
           pure_options = PureSettingsForXinetd ();
        } else { 
           map options = (map)SCR::Execute (.target.bash_output, 
                      "/usr/sbin/pure-config-args /etc/pure-ftpd/pure-ftpd.conf");        
	   if (options["exit"]:nil ==  0)
              pure_options = (string) options["stdout"]:nil;
           else
              return false;
        } 
        Inetd::netd_conf[FtpServer::pureftpd_xined_id,"server"] = "/usr/sbin/pure-ftpd";
        Inetd::netd_conf[FtpServer::pureftpd_xined_id,"server_args"] = pure_options;
     }

     if (startxinetd)
        Inetd::netd_status = 0; //start xinetd if not running else reload

  } else {
    Inetd::netd_status = 0;
    Inetd::netd_conf[FtpServer::pureftpd_xined_id,"enabled"] = false;
    Inetd::netd_conf[FtpServer::vsftpd_xined_id,"enabled"] = false;
    FtpServer::vsftp_xinetd_running = false;
    FtpServer::pure_ftp_xinetd_running = false;
  } //end of else [ if (FtpServer::EDIT_SETTINGS["StartDaemon"]:nil == "2")]

  Inetd::netd_conf[FtpServer::pureftpd_xined_id,"changed"] = true;
  Inetd::netd_conf[FtpServer::vsftpd_xined_id,"changed"] = true;
  // writing changes into xinetd
  boolean status_progress = Progress::set(false);
  result = Inetd::Write();
  Progress::set(status_progress);

  return result;

}

/**
 * Returns boundaries defined by PassivePortRange.
 *
 * two delimiters are allowed in port range: colon and space. See bnc#782386
 * numbers in range can be separated by at least one whitespace or just one colon.
 */
define list<string> GetPassivePortRangeBoundaries()
{
    // this function is specific for pure-ftpd config.
    if( vsftpd_edit)
        return nil;

    string port_range = regexpsub( FtpServer::PURE_SETTINGS["PassivePortRange"]:nil, "^([0-9]*)(\\s+|:)([0-9]*)$", "\\1:\\3");

    return port_range != nil ? splitstring( port_range, ":") : nil;
}

/**
 * Function return init value for UI widgets
 * and prepare internal data structure for writing
 * to config file
 * Example: ValueUI("ChrootEnabled") => "yes"/"no" 
 */

global string ValueUI (string key, boolean write) {
  list <string> ports = [];
  integer authentic = 0;
  string yes_no = "";
  switch(key) {
    case("ChrootEnable"):
	if (FtpServer::vsftpd_edit) {
	   if (write) { 
              FtpServer::VS_SETTINGS["chroot_local_user"] = FtpServer::EDIT_SETTINGS["ChrootEnable"]:nil;	
           } else {
	      return ((haskey(FtpServer::VS_SETTINGS, "chroot_local_user") ? 
		     toupper(FtpServer::VS_SETTINGS["chroot_local_user"]:nil) : FtpServer::DEFAULT_CONFIG["ChrootEnable"]:nil));
 	   }	
	} else {
	   if (write) {              
	      FtpServer::PURE_SETTINGS["ChrootEveryone"] = FtpServer::EDIT_SETTINGS["ChrootEnable"]:nil;	
           } else {
	      return ((haskey(FtpServer::PURE_SETTINGS, "ChrootEveryone") ? 
		     toupper(FtpServer::PURE_SETTINGS["ChrootEveryone"]:nil) : FtpServer::DEFAULT_CONFIG["ChrootEnable"]:nil));
 	   }	   
	}
	break;
    case("VerboseLogging"):
	if (FtpServer::vsftpd_edit) {
	   if (write) { 
              FtpServer::VS_SETTINGS["log_ftp_protocol"] = FtpServer::EDIT_SETTINGS["VerboseLogging"]:nil;
	      FtpServer::VS_SETTINGS["syslog_enable"] = FtpServer::EDIT_SETTINGS["VerboseLogging"]:nil;	
           } else {
	      return ((haskey(FtpServer::VS_SETTINGS, "log_ftp_protocol") ? 
		     toupper(FtpServer::VS_SETTINGS["log_ftp_protocol"]:nil) : FtpServer::DEFAULT_CONFIG["VerboseLogging"]:nil));
 	   }	
	} else {
	   if (write)
              FtpServer::PURE_SETTINGS["VerboseLog"] = FtpServer::EDIT_SETTINGS["VerboseLogging"]:nil;
           else
	      return ((haskey(FtpServer::PURE_SETTINGS, "VerboseLog") ?
		     toupper(FtpServer::PURE_SETTINGS["VerboseLog"]:nil):FtpServer::DEFAULT_CONFIG["VerboseLogging"]:nil));
	}
	break;

    //only vsftpd
    case("FtpDirLocal"):
	if (FtpServer::vsftpd_edit) {
	   if (write) { 
	      if (FtpServer::EDIT_SETTINGS["FtpDirLocal"]:nil != "")	       
                 FtpServer::VS_SETTINGS["local_root"] = FtpServer::EDIT_SETTINGS["FtpDirLocal"]:nil;
	      else
		 FtpServer::VS_SETTINGS["local_root"] = nil;	
           } else {
	      return ((haskey(FtpServer::VS_SETTINGS, "local_root") ? 
		     FtpServer::VS_SETTINGS["local_root"]:nil : FtpServer::DEFAULT_CONFIG["FtpDirLocal"]:nil));
 	   }	
	} else {	   
	   if (!write)
 	      return FtpServer::DEFAULT_CONFIG["FtpDirLocal"]:nil;
           else
              return "";
	}
	break;

   //only vsftpd
    case("FtpDirAnon"):
	if (FtpServer::vsftpd_edit) {
	   if (write) { 
	      if (FtpServer::EDIT_SETTINGS["FtpDirAnon"]:nil != "")
                 FtpServer::VS_SETTINGS["anon_root"] = FtpServer::EDIT_SETTINGS["FtpDirAnon"]:nil;
	      else
		 FtpServer::VS_SETTINGS["anon_root"] = nil;	
           } else {
	      return ((haskey(FtpServer::VS_SETTINGS, "anon_root") ? 
		     FtpServer::VS_SETTINGS["anon_root"]:nil : FtpServer::DEFAULT_CONFIG["FtpDirAnon"]:nil));
 	   }	
	} else {	   
	   if (!write)
	      /**
		* initialization this part will be done 
		* in function ReadSettings () in FtpServer.ycp
              **/
 	      return "";
           else
	      /**
		* write option will be done 
		* in function WriteSettings () in FtpServer.ycp
              **/
              return "";
	}
	break;
    //only vsftpd
    case("UmaskAnon"):
        if (FtpServer::vsftpd_edit) {
	   if (write) {
	      if (FtpServer::EDIT_SETTINGS["UmaskAnon"]:nil != "")	       
                 FtpServer::VS_SETTINGS["anon_umask"] = FtpServer::EDIT_SETTINGS["UmaskAnon"]:nil;
	      else
		 FtpServer::VS_SETTINGS["anon_umask"] = nil;
           } else {
	      return ((haskey(FtpServer::VS_SETTINGS, "anon_umask") ? 
		     toupper(FtpServer::VS_SETTINGS["anon_umask"]:nil) : FtpServer::DEFAULT_CONFIG["UmaskAnon"]:nil));
 	   }	
        }  else {
	    if (!write)
 	      return FtpServer::DEFAULT_CONFIG["UmaskAnon"]:nil;
            else
              return "";
	}
	break;

    //only vsftpd
    case("UmaskLocal"):
        if (FtpServer::vsftpd_edit) {
	   if (write) { 
 	      if (FtpServer::EDIT_SETTINGS["UmaskLocal"]:nil != "")	       
                 FtpServer::VS_SETTINGS["local_umask"] = FtpServer::EDIT_SETTINGS["UmaskLocal"]:nil;
	      else
		 FtpServer::VS_SETTINGS["local_umask"] = nil;             	
           } else {
	      return ((haskey(FtpServer::VS_SETTINGS, "local_umask") ? 
		     toupper(FtpServer::VS_SETTINGS["local_umask"]:nil) : FtpServer::DEFAULT_CONFIG["UmaskLocal"]:nil));
 	   }	  
        } else {
	   if (!write)
 	      return FtpServer::DEFAULT_CONFIG["UmaskLocal"]:nil;
            else
              return "";
	}
	break;

    //only pure-ftpd
    case("Umask"):
        if (FtpServer::vsftpd_edit) {
	   if (!write)
 	      return FtpServer::DEFAULT_CONFIG["Umask"]:nil;
           else
              return "";
        } else {
	   if (write) {
              if (FtpServer::EDIT_SETTINGS["Umask"]:nil != "")
		 FtpServer::PURE_SETTINGS["Umask"] = FtpServer::EDIT_SETTINGS["Umask"]:nil;
	      else
		 FtpServer::PURE_SETTINGS["Umask"] = nil;	
	   }
           else
	      return ((haskey(FtpServer::PURE_SETTINGS, "Umask") ?
	             FtpServer::PURE_SETTINGS["Umask"]:nil:FtpServer::DEFAULT_CONFIG["Umask"]:nil));
	}
	break;

    case("PasMinPort"):
	if (FtpServer::vsftpd_edit) {
	   if (write) { 
 	      if (FtpServer::EDIT_SETTINGS["PasMinPort"]:nil != "")	       
                 FtpServer::VS_SETTINGS["pasv_min_port"] = FtpServer::EDIT_SETTINGS["PasMinPort"]:nil;
	      else
		 FtpServer::VS_SETTINGS["pasv_min_port"] = nil; 	
           } else {
	      return ((haskey(FtpServer::VS_SETTINGS, "pasv_min_port") ? 
		     toupper(FtpServer::VS_SETTINGS["pasv_min_port"]:nil) : FtpServer::DEFAULT_CONFIG["PasMinPort"]:nil));
	   }
	} else {
	   if (write) {
	      if ((FtpServer::EDIT_SETTINGS["PasMinPort"]:nil != "") && 
		 (FtpServer::EDIT_SETTINGS["PasMaxPort"]:nil != "0")) {		 
	         ports = add(ports, FtpServer::EDIT_SETTINGS["PasMinPort"]:nil);
	         ports = add(ports, FtpServer::EDIT_SETTINGS["PasMaxPort"]:nil);
	         if (size(ports) == 2) {
		    string val = ports[0]:nil;
		    val = val+":";
		    val = val+ports[1]:nil;
		    FtpServer::PURE_SETTINGS["PassivePortRange"] = val;
	         }
	      } else {
		    FtpServer::PURE_SETTINGS["PassivePortRange"] = nil;
	      }
 	   }	
           else {
	      if (haskey(FtpServer::PURE_SETTINGS, "PassivePortRange")) {
	         ports = GetPassivePortRangeBoundaries();
	         if (size(ports)==2)
		    return ports[0]:"";
	      } else {
	         return FtpServer::DEFAULT_CONFIG["PasMinPort"]:nil;
	      }
	  }
	}	
	break;

       
    case("PasMaxPort"):
	if (FtpServer::vsftpd_edit) {
	   if (write) { 
 	      if (FtpServer::EDIT_SETTINGS["PasMaxPort"]:nil != "0")	       
                 FtpServer::VS_SETTINGS["pasv_max_port"] = FtpServer::EDIT_SETTINGS["PasMaxPort"]:nil;
	      else {
		 FtpServer::VS_SETTINGS["pasv_max_port"] = nil;
		 FtpServer::VS_SETTINGS["pasv_min_port"] = nil; 
              }	
  	
           } else {
	      return ((haskey(FtpServer::VS_SETTINGS, "pasv_max_port") ? 
		     toupper(FtpServer::VS_SETTINGS["pasv_max_port"]:nil) : FtpServer::DEFAULT_CONFIG["PasMaxPort"]:nil)); 
	   }
	} else {
	   if (write)
              return "";
           else {
	      if (haskey(FtpServer::PURE_SETTINGS, "PassivePortRange")) {
	         ports = GetPassivePortRangeBoundaries();
	         if (size(ports)==2)
		    return ports[1]:"";
	      } else {
	         return FtpServer::DEFAULT_CONFIG["PasMaxPort"]:nil;
	      }
	  }
	}	
	break;

    case("MaxIdleTime"):
	if (FtpServer::vsftpd_edit) {
           integer min_sec = 0;
	   if (write) { 
 	      if (FtpServer::EDIT_SETTINGS["MaxIdleTime"]:nil != "0") {
		 min_sec = tointeger(FtpServer::EDIT_SETTINGS["MaxIdleTime"]:nil);
		 min_sec = min_sec*60;	       
                 FtpServer::VS_SETTINGS["idle_session_timeout"] = tostring(min_sec);
		 
	      } else
		 FtpServer::VS_SETTINGS["idle_session_timeout"] = nil; 		
           } else {
              if (haskey(FtpServer::VS_SETTINGS, "idle_session_timeout")) {
		 min_sec = tointeger(FtpServer::VS_SETTINGS["idle_session_timeout"]:nil);
		 min_sec = min_sec/60;
		 return (tostring(min_sec));
	      } else {
	         return FtpServer::DEFAULT_CONFIG["MaxIdleTime"]:nil;
	      }
	   } 
	} else {
	   if (write) {
	      if (FtpServer::EDIT_SETTINGS["MaxIdleTime"]:nil!="0") {
                 FtpServer::PURE_SETTINGS["MaxIdleTime"] = FtpServer::EDIT_SETTINGS["MaxIdleTime"]:nil;
	      } else {
		 FtpServer::PURE_SETTINGS["MaxIdleTime"] = nil;
	      }
	   }
           else
	      return ((haskey(FtpServer::PURE_SETTINGS, "MaxIdleTime") ?
		     FtpServer::PURE_SETTINGS["MaxIdleTime"]:nil:FtpServer::DEFAULT_CONFIG["MaxIdleTime"]:nil));
	}
	break;

   case("MaxClientsPerIP"):
	if (FtpServer::vsftpd_edit) {
	   if (write) { 
 	      if (FtpServer::EDIT_SETTINGS["MaxClientsPerIP"]:nil != "0")	       
                 FtpServer::VS_SETTINGS["max_per_ip"] = FtpServer::EDIT_SETTINGS["MaxClientsPerIP"]:nil;
	      else
		 FtpServer::VS_SETTINGS["max_per_ip"] = nil; 			
           } else {
	      return ((haskey(FtpServer::VS_SETTINGS, "max_per_ip") ? 
		     toupper(FtpServer::VS_SETTINGS["max_per_ip"]:nil) : FtpServer::DEFAULT_CONFIG["MaxClientsPerIP"]:nil));
	   } 

	} else {
	   if (write) {
	      if (FtpServer::EDIT_SETTINGS["MaxClientsPerIP"]:nil!="0")
                 FtpServer::PURE_SETTINGS["MaxClientsPerIP"] = FtpServer::EDIT_SETTINGS["MaxClientsPerIP"]:nil;
	      else
		FtpServer::PURE_SETTINGS["MaxClientsPerIP"] = nil; 
	   }
           else
	      return ((haskey(FtpServer::PURE_SETTINGS, "MaxClientsPerIP") ?
		     FtpServer::PURE_SETTINGS["MaxClientsPerIP"]:nil:FtpServer::DEFAULT_CONFIG["MaxClientsPerIP"]:nil));
	}
	break;


   case("MaxClientsNumber"):
	if (FtpServer::vsftpd_edit) {
	   if (write) { 
 	      if (FtpServer::EDIT_SETTINGS["MaxClientsNumber"]:nil != "0")	       
                 FtpServer::VS_SETTINGS["max_clients"] = FtpServer::EDIT_SETTINGS["MaxClientsNumber"]:nil;
	      else
		 FtpServer::VS_SETTINGS["max_clients"] = nil; 		
           } else {
	      return ((haskey(FtpServer::VS_SETTINGS, "max_clients") ? 
		     toupper(FtpServer::VS_SETTINGS["max_clients"]:nil) : FtpServer::DEFAULT_CONFIG["MaxClientsNumber"]:nil));
	   } 
	} else {
	   if (write) {
	      if (FtpServer::EDIT_SETTINGS["MaxClientsNumber"]:nil!="0")
                 FtpServer::PURE_SETTINGS["MaxClientsNumber"] = FtpServer::EDIT_SETTINGS["MaxClientsNumber"]:nil;
	      else
		FtpServer::PURE_SETTINGS["MaxClientsNumber"] = nil;
	   }
           else
	     return ((haskey(FtpServer::PURE_SETTINGS, "MaxClientsNumber") ?
		    FtpServer::PURE_SETTINGS["MaxClientsNumber"]:nil:FtpServer::DEFAULT_CONFIG["MaxClientsNumber"]:nil));
	}
	break;

   case("LocalMaxRate"):
	if (FtpServer::vsftpd_edit) {
	   integer transfer = 0;
	   if (write) { 
 	      if (FtpServer::EDIT_SETTINGS["LocalMaxRate"]:nil != "0") {
		 transfer = tointeger(FtpServer::EDIT_SETTINGS["LocalMaxRate"]:nil)*1024;	       
                 FtpServer::VS_SETTINGS["local_max_rate"] = tostring(transfer);
	      } else {
		 FtpServer::VS_SETTINGS["local_max_rate"] = nil; 
	      }		
           } else {
	      if (haskey(FtpServer::VS_SETTINGS, "local_max_rate")) {
		 transfer = tointeger(FtpServer::VS_SETTINGS["local_max_rate"]:nil)/1024;
		 return (tostring(transfer));
	      } else {
	         return (FtpServer::DEFAULT_CONFIG["LocalMaxRate"]:nil);
	      }
	   } 
	} else {
	   if (write) {
	      if (FtpServer::EDIT_SETTINGS["LocalMaxRate"]:nil!="0")
                 FtpServer::PURE_SETTINGS["UserBandwidth"] = FtpServer::EDIT_SETTINGS["LocalMaxRate"]:nil;
	      else
		FtpServer::PURE_SETTINGS["UserBandwidth"] = nil;
	   }
           else
	      return ((haskey(FtpServer::PURE_SETTINGS, "UserBandwidth") ?
		     FtpServer::PURE_SETTINGS["UserBandwidth"]:nil:FtpServer::DEFAULT_CONFIG["LocalMaxRate"]:nil));
	}
	break;

   case("AnonMaxRate"):
	if (FtpServer::vsftpd_edit) {
	   integer transfer = 0;
	   if (write) { 
 	      if (FtpServer::EDIT_SETTINGS["AnonMaxRate"]:nil != "0") {
		 transfer = tointeger( FtpServer::EDIT_SETTINGS["AnonMaxRate"]:nil)*1024;     
                 FtpServer::VS_SETTINGS["anon_max_rate"] = tostring(transfer);
	      } else {
		 FtpServer::VS_SETTINGS["anon_max_rate"] = nil;
              } 		
           } else {

	      if (haskey(FtpServer::VS_SETTINGS, "anon_max_rate")) {
		 transfer = tointeger(FtpServer::VS_SETTINGS["anon_max_rate"]:nil)/1024;
		 return (tostring(transfer));
	      } else {
	         return (FtpServer::DEFAULT_CONFIG["AnonMaxRate"]:nil);
              }
	   } 

	} else {
	   if (write) {
 	      if (FtpServer::EDIT_SETTINGS["AnonMaxRate"]:nil!="0")
                 FtpServer::PURE_SETTINGS["AnonymousBandwidth"] = FtpServer::EDIT_SETTINGS["AnonMaxRate"]:nil;
	      else
		FtpServer::PURE_SETTINGS["AnonymousBandwidth"] = nil;
	   }          
           else
	      return ((haskey(FtpServer::PURE_SETTINGS, "AnonymousBandwidth") ?
		     FtpServer::PURE_SETTINGS["AnonymousBandwidth"]:nil:FtpServer::DEFAULT_CONFIG["AnonMaxRate"]:nil));
	}
	break;

   case("AnonAuthen"):
        integer authen = 0;
	if (FtpServer::vsftpd_edit) {
	   if (write) { 
              string val = FtpServer::EDIT_SETTINGS["AnonAuthen"]:nil;
	      if (val == "0") {
		 FtpServer::VS_SETTINGS["anonymous_enable"] = "YES";
		 FtpServer::VS_SETTINGS["local_enable"] = "NO";
	      } else if (val == "1") {
		 FtpServer::VS_SETTINGS["anonymous_enable"] = "NO";
		 FtpServer::VS_SETTINGS["local_enable"] = "YES";
	      } else {
		 FtpServer::VS_SETTINGS["anonymous_enable"] = "YES";
		 FtpServer::VS_SETTINGS["local_enable"] = "YES";
	      }
	      
           } else {
	      yes_no ="";
	      if (haskey(FtpServer::VS_SETTINGS, "anonymous_enable")) {
		 yes_no = toupper(FtpServer::VS_SETTINGS["anonymous_enable"]:nil);
	      } else {
		 yes_no = "YES";
	      }
	      if (yes_no == "YES") {
	         authen = 0;
	      } else {
                 authen = 1;
	      }	      
	      if (haskey(FtpServer::VS_SETTINGS, "local_enable")) {
		 yes_no = toupper(FtpServer::VS_SETTINGS["local_enable"]:nil);
	      } else {
		 yes_no = "NO";
	      }
	      if (yes_no == "YES") {
	         authen = authen +2;
	      } else {
                 authen = authen +0;
	      }
	      if (authen == 0) {
		 return "0";
	      } else {return (authen == 3 ? "1":"2"); }	      
	
	   } 

	} else {
	   if (write) {
              string val = FtpServer::EDIT_SETTINGS["AnonAuthen"]:nil;
	      if (val == "0") {
		 FtpServer::PURE_SETTINGS["AnonymousOnly"] = "YES";
		 FtpServer::PURE_SETTINGS["NoAnonymous"] = "NO";
	      } else if (val == "1") {
		 FtpServer::PURE_SETTINGS["AnonymousOnly"] = "NO";
		 FtpServer::PURE_SETTINGS["NoAnonymous"] = "YES";
	      } else {
		 FtpServer::PURE_SETTINGS["AnonymousOnly"] = "NO";
		 FtpServer::PURE_SETTINGS["NoAnonymous"] = "NO";
	      }
	   }
           else {
              yes_no = "";
	      if (haskey(FtpServer::PURE_SETTINGS, "AnonymousOnly")) {
	         yes_no = toupper(FtpServer::PURE_SETTINGS["AnonymousOnly"]:nil);
              }
	      if (yes_no == "YES")
	         authen = 0;
	      else
                 authen = 1;
	      yes_no = "";
              if (haskey(FtpServer::PURE_SETTINGS, "NoAnonymous")) {
	         string yes_no = toupper(FtpServer::PURE_SETTINGS["NoAnonymous"]:nil);
	      
              }           
	      if (yes_no == "YES")
	         authen = authen + 2;
              if (authen == 0)
                 return "0";
              else return(authen == 3 ? "2":"1");	   
	   }
        }
	break;

    case("AnonReadOnly"):
	if (FtpServer::vsftpd_edit) {
	   if (write) {
	      yes_no = FtpServer::EDIT_SETTINGS["AnonReadOnly"]:nil;
	      if (yes_no == "YES") {
                 FtpServer::VS_SETTINGS["anon_upload_enable"] = "NO";
              } else { 
		 FtpServer::VS_SETTINGS["anon_upload_enable"] = "YES";	
              }
           } else {
              if (haskey(FtpServer::VS_SETTINGS, "anon_upload_enable")) {
		  yes_no = toupper(FtpServer::VS_SETTINGS["anon_upload_enable"]:nil);
		  return ((yes_no == "YES") ? "NO":"YES");
	      } else {
		  return FtpServer::DEFAULT_CONFIG["AnonReadOnly"]:nil;
	      }
	   } 
	} else {
	   if (write) {
	      FtpServer::PURE_SETTINGS["AnonymousCantUpload"] = FtpServer::EDIT_SETTINGS["AnonReadOnly"]:nil;
	   } else {
	      return ((haskey(FtpServer::PURE_SETTINGS, "AnonymousCantUpload") ? 
		     toupper(FtpServer::PURE_SETTINGS["AnonymousCantUpload"]:nil) : FtpServer::DEFAULT_CONFIG["AnonReadOnly"]:nil)); 
   	   }        	
	}
	break;
    
     case("AnonCreatDirs"):
	if (vsftpd_edit) {
	   if (write) { 
              FtpServer::VS_SETTINGS["anon_mkdir_write_enable"] = FtpServer::EDIT_SETTINGS["AnonCreatDirs"]:nil;	      	
           } else {
	      return ((haskey(FtpServer::VS_SETTINGS, "anon_mkdir_write_enable") ? 
		     toupper(FtpServer::VS_SETTINGS["anon_mkdir_write_enable"]:nil) : FtpServer::DEFAULT_CONFIG["AnonCreatDirs"]:nil));
	   } 
	} else {
	   if (write)
              FtpServer::PURE_SETTINGS["AnonymousCanCreateDirs"] = FtpServer::EDIT_SETTINGS["AnonCreatDirs"]:nil;
           else
	      return ((haskey(FtpServer::PURE_SETTINGS, "AnonymousCanCreateDirs") ?
		     toupper(FtpServer::PURE_SETTINGS["AnonymousCanCreateDirs"]:nil):FtpServer::DEFAULT_CONFIG["AnonCreatDirs"]:nil));
	}
	break;
    //only vsftpd
    case("EnableUpload"):
	if (FtpServer::vsftpd_edit) {
	   if (write) { 
 	      if (FtpServer::EDIT_SETTINGS["EnableUpload"]:nil != "")	       
                 FtpServer::VS_SETTINGS["write_enable"] = FtpServer::EDIT_SETTINGS["EnableUpload"]:nil;
	      else
		 FtpServer::VS_SETTINGS["write_enable"] = nil;	
           } else {
	      return ((haskey(FtpServer::VS_SETTINGS, "write_enable") ? 
		     FtpServer::VS_SETTINGS["write_enable"]:nil : FtpServer::DEFAULT_CONFIG["EnableUpload"]:nil));
	   } 
	} else {
           if (!write)
 	      return FtpServer::DEFAULT_CONFIG["EnableUpload"]:nil;
           else
              return "";
        }
	break;

    //only vsftpd
    case("Banner"):
	if (FtpServer::vsftpd_edit) {
	   if (write) { 
 	      if (FtpServer::EDIT_SETTINGS["Banner"]:nil != "")	       
                 FtpServer::VS_SETTINGS["ftpd_banner"] = FtpServer::EDIT_SETTINGS["Banner"]:nil;
	      else
		 FtpServer::VS_SETTINGS["ftpd_banner"] = nil;	
           } else {
	      return ((haskey(FtpServer::VS_SETTINGS, "ftpd_banner") ? 
		     FtpServer::VS_SETTINGS["ftpd_banner"]:nil : FtpServer::DEFAULT_CONFIG["Banner"]:nil));
	   } 
	} else {
           if (!write)
 	      return FtpServer::DEFAULT_CONFIG["Banner"]:nil;
           else
              return "";
        }
	break;


    //only vsftpd
    case("SSLEnable"):
	if (FtpServer::vsftpd_edit) {
	   if (write) { 
 	      if (FtpServer::EDIT_SETTINGS["SSLEnable"]:nil != "")	       
                 FtpServer::VS_SETTINGS["ssl_enable"] = FtpServer::EDIT_SETTINGS["SSLEnable"]:nil;
	      else
		 FtpServer::VS_SETTINGS["ssl_enable"] = "NO";	
           } else {
	      return ((haskey(FtpServer::VS_SETTINGS, "ssl_enable") ? 
		     toupper(FtpServer::VS_SETTINGS["ssl_enable"]:nil) : FtpServer::DEFAULT_CONFIG["SSLEnable"]:nil));
	   } 
	} else {
           if (!write)
 	      return FtpServer::DEFAULT_CONFIG["SSLEnable"]:nil;
           else
              return "";
        }
	break;

    //only vsftpd
    case("CertFile"):
	if (FtpServer::vsftpd_edit) {
	   if (write) { 
 	      if (FtpServer::EDIT_SETTINGS["CertFile"]:nil != "")	       
                 FtpServer::VS_SETTINGS["dsa_cert_file"] = FtpServer::EDIT_SETTINGS["CertFile"]:nil;
	      else
		 FtpServer::VS_SETTINGS["dsa_cert_file"] = nil;	
           } else {
	      return ((haskey(FtpServer::VS_SETTINGS, "dsa_cert_file") ? 
		     FtpServer::VS_SETTINGS["dsa_cert_file"]:nil : FtpServer::DEFAULT_CONFIG["CertFile"]:nil));
	   } 
	} else {
           if (!write)
 	      return FtpServer::DEFAULT_CONFIG["CertFile"]:nil;
           else
              return "";
        }
	break;

    //only vsftpd
    case("PassiveMode"):
	if (FtpServer::vsftpd_edit) {
	   if (write) { 
 	      if (FtpServer::EDIT_SETTINGS["PassiveMode"]:nil != "")	       
                 FtpServer::VS_SETTINGS["pasv_enable"] = FtpServer::EDIT_SETTINGS["PassiveMode"]:nil;
	      else
		 FtpServer::VS_SETTINGS["pasv_enable"] = "NO";	
           } else {
	      return ((haskey(FtpServer::VS_SETTINGS, "pasv_enable") ? 
		     toupper(FtpServer::VS_SETTINGS["pasv_enable"]:nil) : FtpServer::DEFAULT_CONFIG["PassiveMode"]:nil));
	   } 
	} else {
           if (!write)
 	      return FtpServer::DEFAULT_CONFIG["PassiveMode"]:nil;
           else
              return "";
        }
	break;

  
   //only vsftpd
   case("TLS"):
	if (FtpServer::vsftpd_edit) {
	   if (write) { 
              FtpServer::VS_SETTINGS["ssl_tlsv1"] = EDIT_SETTINGS["TLS"]:nil;
           } else {
	      return ((haskey(FtpServer::VS_SETTINGS, "ssl_tlsv1") ? 
		     toupper(FtpServer::VS_SETTINGS["ssl_tlsv1"]:nil) : FtpServer::DEFAULT_CONFIG["TLS"]:nil));
	   } 
	} else {
           if (!write)
 	      return FtpServer::DEFAULT_CONFIG["TLS"]:nil;
           else
              return "";
        }
	break;

   //only vsftpd
   case("SSLv2"):
	if (FtpServer::vsftpd_edit) {
	   if (write) { 
              FtpServer::VS_SETTINGS["ssl_sslv2"] = EDIT_SETTINGS["SSLv2"]:nil;
           } else {
	      return ((haskey(FtpServer::VS_SETTINGS, "ssl_sslv2") ? 
		     toupper(FtpServer::VS_SETTINGS["ssl_sslv2"]:nil) : FtpServer::DEFAULT_CONFIG["SSLv2"]:nil));
	   } 
	} else {
           if (!write)
 	      return FtpServer::DEFAULT_CONFIG["SSLv2"]:nil;
           else
              return "";
        }
	break;

   //only vsftpd
   case("SSLv3"):
	if (FtpServer::vsftpd_edit) {
	   if (write) { 
              FtpServer::VS_SETTINGS["ssl_sslv3"] = EDIT_SETTINGS["SSLv3"]:nil;
           } else {
	      return ((haskey(FtpServer::VS_SETTINGS, "ssl_sslv3") ? 
		     toupper(FtpServer::VS_SETTINGS["ssl_sslv3"]:nil) : FtpServer::DEFAULT_CONFIG["SSLv3"]:nil));
	   } 
	} else {
           if (!write)
 	      return FtpServer::DEFAULT_CONFIG["SSLv3"]:nil;
           else
              return "";
        }
	break;

   //only vsftpd
   case("FTPUser"):
	if (FtpServer::vsftpd_edit) {
	   if (write) { 
              return "";
           } else {
	      return ((haskey(FtpServer::VS_SETTINGS, "ftp_username") ? 
		     FtpServer::VS_SETTINGS["ftp_username"]:nil : FtpServer::DEFAULT_CONFIG["FTPUser"]:nil));
	   } 
	} else {
           if (!write)
 	      return FtpServer::DEFAULT_CONFIG["FTPUser"]:nil;
           else
              return "";
        }
	break;

   //only vsftpd
   case("GuestUser"):
	if (FtpServer::vsftpd_edit) {
	   if (write) { 
              return "";
           } else {
	      if ((haskey(FtpServer::VS_SETTINGS, "guest_username")) && 
                 (haskey(FtpServer::VS_SETTINGS, "guest_enable"))) {
		 yes_no = toupper(FtpServer::VS_SETTINGS["guest_enable"]:nil);
		     if (yes_no == "YES")
		        return FtpServer::VS_SETTINGS["guest_username"]:nil;
                     else
			return FtpServer::DEFAULT_CONFIG["GuestUser"]:nil;

              } else {
		 return FtpServer::DEFAULT_CONFIG["GuestUser"]:nil;
              }
	   } 
	} else {
           if (!write)
 	      return FtpServer::DEFAULT_CONFIG["GuestUser"]:nil;
           else
              return "";
        }
	break;
   //only pure-ftpd
   case("AntiWarez"):
	if (FtpServer::vsftpd_edit) {
	   if (!write)
 	      return FtpServer::DEFAULT_CONFIG["AntiWarez"]:nil;
           else
              return "";

	} else {
	   if (write)
              FtpServer::PURE_SETTINGS["AntiWarez"] = FtpServer::EDIT_SETTINGS["AntiWarez"]:nil;
           else
	      return ((haskey(FtpServer::PURE_SETTINGS, "AntiWarez") ?
		     toupper(FtpServer::PURE_SETTINGS["AntiWarez"]:nil):FtpServer::DEFAULT_CONFIG["AntiWarez"]:nil));	   	   
	}
	break;

   //only pure-ftpd
   case("SSL"):
	if (FtpServer::vsftpd_edit) {
	   if (!write)
 	      return FtpServer::DEFAULT_CONFIG["SSL"]:nil;
           else
              return "";
	} else {
	   if (write)
              FtpServer::PURE_SETTINGS["TLS"] = FtpServer::EDIT_SETTINGS["SSL"]:nil;
           else
	      return ((haskey(FtpServer::PURE_SETTINGS, "TLS") ?
		     FtpServer::PURE_SETTINGS["TLS"]:nil:FtpServer::DEFAULT_CONFIG["SSL"]:nil));	   	   
	}
	break;

   //only pure-ftpd
   case("VirtualUser"):
	if (FtpServer::vsftpd_edit) {
	   if (!write)				
 	      return FtpServer::DEFAULT_CONFIG["VirtualUser"]:nil;
           else
              return "";
	} else {
	   if (!write)
              if (haskey(FtpServer::PURE_SETTINGS, "PureDB")) {
                 return "YES";
              } else {
	         return FtpServer::DEFAULT_CONFIG["VirtualUser"]:nil;	 
              }  	   
	}
        break; 
      
    case("StartXinetd"):
        boolean result = false;	
	 if (write) {

           if (FtpServer::EDIT_SETTINGS["StartDaemon"]:nil == "2") {
	      if (EDIT_SETTINGS["StartXinetd"]:nil == "YES") {
	         FtpServer::start_xinetd = true;
                 if (Service::Enabled("vsftpd"))
                    Service::Disable("vsftpd");
                 if (Service::Enabled("pure-ftpd"))
                    Service::Disable("pure-ftpd");
	         if (FtpServer::vsftpd_edit) {
		    FtpServer::VS_SETTINGS["listen"]=nil;
	         } else {
		    FtpServer::PURE_SETTINGS["Daemonize"]="NO";		    
                 }
              }
           } else {           
              if (FtpServer::EDIT_SETTINGS["StartDaemon"]:nil == "1") {
                 if (FtpServer::vsftpd_edit) {
		    Service::Disable("pure-ftpd");
                    Service::Enable("vsftpd");
      
	         } else { 
                    Service::Disable("vsftpd");
		    Service::Enable("pure-ftpd");
                 }
                 if (FtpServer::vsftpd_edit) {
		    FtpServer::VS_SETTINGS["listen"]="YES";
		 } else {
		    FtpServer::PURE_SETTINGS["Daemonize"]="YES";
                 }
              } else {
                 Service::Disable("vsftpd");
		 Service::Disable("pure-ftpd");
		 if (FtpServer::vsftpd_edit) {
		    FtpServer::VS_SETTINGS["listen"]="YES";
		 } else {
		    FtpServer::PURE_SETTINGS["Daemonize"]="YES";
                 }
	      }
              FtpServer::start_xinetd = false;
           }	   
           //FtpServer::EDIT_SETTINGS = remove(FtpServer::EDIT_SETTINGS, "StartXinetd");           
        } else {
           FtpServer::EDIT_SETTINGS["StartDaemon"] = "0";	   
           result = InitStartViaXinetd ();
           if (!result) {
	      if ((Service::Enabled("vsftpd")) && (FtpServer::vsftpd_edit))
	         FtpServer::EDIT_SETTINGS["StartDaemon"] = "1";        
  	      if ((Service::Enabled("pure-ftpd")) && (!FtpServer::vsftpd_edit))
                 FtpServer::EDIT_SETTINGS["StartDaemon"] = "1";
           }
           if (result && (FtpServer::EDIT_SETTINGS["StartDaemon"]:nil == "2")) {
              if (Service::Status("xinetd") == 0)
                 SettingsXinetdPure (FtpServer::pure_ftpd_xinet_conf);
           }
	   return ((Service::Status("xinetd") == 0) ? "YES":"NO");
	}  	   	
	break; 
  
    default:
	y2milestone ("[ftp-server] ValueUI(string key): unknown parameter %1", key);
	return "";
	break;
        
  }


}

}
