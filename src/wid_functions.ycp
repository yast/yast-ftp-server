/**
 * File:	include/ftp-server/wid_functions.ycp
 * Package:	Configuration of ftp-server
 * Summary:	Wizards definitions
 * Authors:	Jozef Uhliarik <juhliarik@suse.cz>
 *
 * $Id: wid_functions.ycp 27914 2006-02-13 14:32:08Z juhliarik $
 */

{

textdomain "ftp-server";

import "Popup";
import "Wizard";
import "Service";
import "Users";
import "Mode";
import "FileUtils";
import "Label";
import "FtpServer";


/**
 *  variable signifies repeat asking about upload file
 *  only for vsftpd
 *
 * internal boolean variable
 */
boolean ask_again = true; 

/**
 * CWMServiceStart function with no parameter returning boolean value 
 * that says if the service is started.
 */
boolean GetEnableService () {
  boolean result = false;
  if (FtpServer::EDIT_SETTINGS["StartDaemon"]:nil == "1")
     result = true;
  else
     result = false;   
  return result;
}


/**
 * CWMServiceStart function with one boolean parameter  
 * returning boolean value that says if the service will be started at boot.
 */
void SetEnableService (boolean enable_service) {  
  if (size(FtpServer::EDIT_SETTINGS) == 0)
     FtpServer::EDIT_SETTINGS = FtpServer::DEFAULT_CONFIG;

  if (enable_service) {
     FtpServer::EDIT_SETTINGS["StartDaemon"] = "1";
     FtpServer::EDIT_SETTINGS["StartXinetd"] = "NO";
  }
}

/**
 * CWMServiceStart function with no parameter returning boolean value 
 * that says if the service is started.
 */
boolean GetStartedViaXinetd () {
  boolean result = false;
  if (FtpServer::EDIT_SETTINGS["StartDaemon"]:nil == "2")
     result = true;
  else
     result = false; 

    
  return result;
}


boolean AskStartXinetd () {
  boolean result = false;

  if ((Service::Status("xinetd") != 0) && (FtpServer::EDIT_SETTINGS["StartXinetd"]:nil == "NO")) {
     if (Mode::normal()) {
        UI::OpenDialog( `VBox(
	  `Label(_("Xinetd is not running.")),
	  `Label(_("Start it now?")),
	  `ButtonBox(
	    `PushButton(`id(`accept), Label::OKButton()),
	    `PushButton(`id(`cancel), Label::CancelButton())
          )
        )); // end of UI::OpenDialog(
        while (true) {
          any ret = UI::UserInput();
          if ( ret == `accept ) {
             result = true;
	     break;
          } else if (ret == `cancel) {
             result = false;
	     break;
          }
        };
        UI::CloseDialog();
     } // end of if (Mode::normal()) {
  } // end of if ((Service::Status("xinetd") != 0)...

  return result;
}

/**
 * CWMServiceStart function with one boolean parameter  
 * returning boolean value that says if the service will be started at boot.
 */
void SetStartedViaXinetd (boolean enable_service) {
  boolean result = true;
  if (enable_service) {
     FtpServer::EDIT_SETTINGS["StartDaemon"] = "2";
     result = AskStartXinetd ();
     if (!result) {
        if (Service::Status("xinetd") == 0)
           result = true;
     }
     if (result)
        FtpServer::EDIT_SETTINGS["StartXinetd"] = "YES";
     else
        FtpServer::EDIT_SETTINGS["StartXinetd"] = "NO";
  } else { 
     FtpServer::EDIT_SETTINGS["StartDaemon"] = "0";
     FtpServer::EDIT_SETTINGS["StartXinetd"] = "NO";
  }

}


void UpdateInfoAboutStartingFTP () {

  //which radiobutton is selected for starting "when booting", "via xinetd" or "manually"
  any value = UI::QueryWidget (`id ("_cwm_service_startup"),`Value);

  if (tostring(value) == "_cwm_startup_manual")
     FtpServer::EDIT_SETTINGS["StartDaemon"] = "0";

  else if (tostring(value) == "_cwm_startup_auto")
     FtpServer::EDIT_SETTINGS["StartDaemon"] = "1";

  else
     FtpServer::EDIT_SETTINGS["StartDaemon"] = "2";

}


/**
 * Function start vsftpd
 */
boolean StartNowVsftpd () {
  boolean result = false;

  UpdateInfoAboutStartingFTP ();
  
  if ((FtpServer::EDIT_SETTINGS["StartDaemon"]:nil == "2") && (Service::Status("pure-ftpd") != 0)) {

     SCR::Write(add(.vsftpd, "listen"), nil); 
     SCR::Write(add(.vsftpd, "listen_ipv6"), nil); 
     SCR::Write(.vsftpd, nil);    
     FtpServer::stop_daemon_xinetd = false;
     result = AskStartXinetd ();

     if (!result) {
        if ((Service::Status("xinetd") == 0) || (FtpServer::EDIT_SETTINGS["StartXinetd"]:nil == "YES"))
        result = true;
     }

     if (FtpServer::WriteStartViaXinetd(true,true) && result) {
         FtpServer::vsftp_xinetd_running = true;
         FtpServer::pure_ftp_xinetd_running = false;
         UI::ReplaceWidget (`id ("_cwm_service_status_rp"), `Label(_("FTP is running")));
         UI::ChangeWidget (`id ("_cwm_start_service_now"), `Enabled, false);
         UI::ChangeWidget (`id ("_cwm_stop_service_now"), `Enabled, true);   
         result = true;
     }


  } else {     
     SCR::Write(add(.vsftpd, "listen"), "YES"); 
     SCR::Write(add(.vsftpd, "listen_ipv6"), nil); 
     SCR::Write(.vsftpd, nil);    
     string command = "rcvsftpd start";
     map options = (map)SCR::Execute (.target.bash_output, command);
     y2milestone("[ftp-server] (StartNowVsftpd) command for starting vsftpd:  %1  output: %2",command, options);       
     if (options["exit"]:nil ==  0)
        result = true;
     else
        result = false;
  }
  return result;
}


/**
 * Function stop vsftpd
 */
boolean StopNowVsftpd () {
  boolean result = false;

  //UpdateInfoAboutStartingFTP ();

  if (FtpServer::vsftp_xinetd_running) {
    FtpServer::stop_daemon_xinetd = true;
     if (FtpServer::WriteStartViaXinetd(true,true)) {
         FtpServer::vsftp_xinetd_running = false;
         UI::ReplaceWidget (`id ("_cwm_service_status_rp"), `Label(_("FTP is not running")));
         UI::ChangeWidget (`id ("_cwm_start_service_now"), `Enabled, true);
         UI::ChangeWidget (`id ("_cwm_stop_service_now"), `Enabled, false);
         result = true;    
     }

  } else {

    string command = "rcvsftpd stop";
    map options = (map)SCR::Execute (.target.bash_output, command);
    y2milestone("[ftp-server] (StopNowVsftpd) command for stop vsftpd:  %1  output: %2",command, options);       
    if (options["exit"]:nil ==  0)
       result = true;
    else
       result = false;
  }
 return result;
}

/**
 * Function saves configuration and restarts vsftpd
 */
boolean SaveAndRestartVsftpd () {  
  boolean result = false;
  
  result =   StopNowVsftpd ();
  UpdateInfoAboutStartingFTP ();

  if ((FtpServer::EDIT_SETTINGS["StartDaemon"]:nil == "2") && (Service::Status("pure-ftpd") != 0)) {
     result = AskStartXinetd ();
     //write settings to disk...
     FtpServer::WriteSettings ();     
     
     if (!result) {
        if ((Service::Status("xinetd") == 0) || (FtpServer::EDIT_SETTINGS["StartXinetd"]:nil == "YES"))
        result = true;
     }
     FtpServer::stop_daemon_xinetd = false;
     if (FtpServer::WriteStartViaXinetd(true,false) && result) {
         FtpServer::vsftp_xinetd_running = true;
         UI::ReplaceWidget (`id ("_cwm_service_status_rp"), `Label(_("FTP is running")));
         UI::ChangeWidget (`id ("_cwm_start_service_now"), `Enabled, false);
         UI::ChangeWidget (`id ("_cwm_stop_service_now"), `Enabled, true);   
         result = true; 
     }
         
 
  } else {
    FtpServer::WriteSettings ();    
    string command = "rcvsftpd start";
    map options = (map)SCR::Execute (.target.bash_output, command);
    y2milestone("[ftp-server] (SaveAndRestartVsftpd) command for save and restart vsftpd:  %1  output: %2",command, options);       
    if (options["exit"]:nil ==  0)
       result = true;
    else
       result = false;
  }
  FtpServer::WriteUpload ();
  return result;
}




/**
 * Function start pure-ftpd
 */

boolean StartNowPure () {
  boolean result = false;

  UpdateInfoAboutStartingFTP ();

  if ((FtpServer::EDIT_SETTINGS["StartDaemon"]:nil == "2") && (Service::Status("vsftpd") != 0)) {
     FtpServer::stop_daemon_xinetd = false;
     result = AskStartXinetd ();

     if (!result) {
        if ((Service::Status("xinetd") == 0) || (FtpServer::EDIT_SETTINGS["StartXinetd"]:nil == "YES"))
        result = true;
     }

     if (FtpServer::WriteStartViaXinetd(true,true) && result) {
         FtpServer::pure_ftp_xinetd_running = true;
         FtpServer::vsftp_xinetd_running = false;
         UI::ReplaceWidget (`id ("_cwm_service_status_rp"), `Label(_("FTP is running")));
         UI::ChangeWidget (`id ("_cwm_start_service_now"), `Enabled, false);
         UI::ChangeWidget (`id ("_cwm_stop_service_now"), `Enabled, true);
         result = true;    
     }
  } else {

    SCR::Write(add(.pure-ftpd, "Daemonize"), "YES"); 
    SCR::Write(.pure-ftpd, nil);
    string command = "rcpure-ftpd start";

    map options = (map)SCR::Execute (.target.bash_output, command);

    y2milestone("[ftp-server] (StartNowPure) command for start pure-ftpd:  %1  output: %2",command, options);  
         
    if (options["exit"]:nil ==  0)
       result = true;
    else
       result = false;
    
  }
  return result;
}

/**
 * Function stop pure-ftpd
 */
boolean StopNowPure () {
  boolean result = false; 

  if (FtpServer::pure_ftp_xinetd_running) {
     //Popup::Message(_("This is not supported via xinetd now."));
     
     FtpServer::stop_daemon_xinetd = true;
     if (FtpServer::WriteStartViaXinetd(true,true)) {
         FtpServer::pure_ftp_xinetd_running = false;
         UI::ReplaceWidget (`id ("_cwm_service_status_rp"), `Label(_("FTP is not running")));
         UI::ChangeWidget (`id ("_cwm_start_service_now"), `Enabled, true);
         UI::ChangeWidget (`id ("_cwm_stop_service_now"), `Enabled, false); 
         result = true;  
     }
  } else {
     string command = "rcpure-ftpd stop";
     map options = (map)SCR::Execute (.target.bash_output, command);
     y2milestone("[ftp-server] (StopNowPure) command for stop pure-ftpd:  %1  output: %2",command, options);       
     if (options["exit"]:nil ==  0)
        result = true;
     else
        result = false;
  }
  return result;
}

/**
 * Function saves configuration and restarts pure-ftpd
 */
boolean SaveAndRestartPure () {
  boolean result = false;

  result = StopNowPure ();
  UpdateInfoAboutStartingFTP ();

  if ((FtpServer::EDIT_SETTINGS["StartDaemon"]:nil == "2") && (Service::Status("vsftpd") != 0)) {
     result = AskStartXinetd ();
     //write settings to disk...
     FtpServer::WriteSettings ();     
     
     if (!result) {
        if ((Service::Status("xinetd") == 0) || (FtpServer::EDIT_SETTINGS["StartXinetd"]:nil == "YES"))
        result = true;
     }
     FtpServer::stop_daemon_xinetd = false;
     if (FtpServer::WriteStartViaXinetd(true,false) && result) {
         FtpServer::pure_ftp_xinetd_running = true;
         UI::ReplaceWidget (`id ("_cwm_service_status_rp"), `Label(_("FTP is running")));
         UI::ChangeWidget (`id ("_cwm_start_service_now"), `Enabled, false);
         UI::ChangeWidget (`id ("_cwm_stop_service_now"), `Enabled, true);  
         result = true;  
     }
         
  }  else {
    //write settings to disk...
    FtpServer::WriteSettings ();
    string command = "rcpure-ftpd start";
    map options = (map)SCR::Execute (.target.bash_output, command);
    y2milestone("[ftp-server] (StopNowPure) command for save and restart pure-ftpd:  %1  output: %2",command, options);
    if (options["exit"]:nil ==  0)
       result = true;
    else
       result = false;
  }
  result = FtpServer::WriteUpload ();
  return result;
}


/**
 * Init function for general settings
 * save values to temporary structure
 */  
void InitRBVsPure (string key) {
  if ((FtpServer::vsftpd_installed) && (FtpServer::pureftpd_installed)) {
     if (FtpServer::vsftpd_edit) {
        UI::ChangeWidget(`id( "vs_item" ), `Value, true);
     }else
        UI::ChangeWidget(`id( "pure_item" ), `Value, true);
  } else if (FtpServer::vsftpd_installed && !FtpServer::pureftpd_installed) {
     UI::ChangeWidget(`id( "vs_item" ), `Value, true);
     UI::ChangeWidget(`id( "pure_item" ), `Enabled, false);
     UI::ChangeWidget(`id("vs_item"), `Enabled, false);
  } else if (!FtpServer::vsftpd_installed && FtpServer::pureftpd_installed) {
     UI::ChangeWidget(`id( "pure_item" ), `Value, true);
     UI::ChangeWidget(`id( "pure_item" ), `Enabled, false);
     UI::ChangeWidget(`id("vs_item"), `Enabled, false);
  } else {
     UI::ChangeWidget(`id( "pure_item" ), `Enable, false);
     UI::ChangeWidget(`id("vs_item"), `Enabled, false);
  }

  if (!Mode::normal()) {
     if (FtpServer::vsftpd_edit) {
        UI::ChangeWidget(`id( "vs_item" ), `Value, true);
     } else {
        UI::ChangeWidget(`id( "pure_item" ), `Value, true);
     }
     UI::ChangeWidget(`id( "pure_item" ), `Enable, false);
     UI::ChangeWidget(`id("vs_item"), `Enabled, false);
  }
}


symbol HandleRBVsPure(string key, map event) {
  if ((FtpServer::vsftpd_edit) && ((boolean) UI::QueryWidget (`id("pure_item"), `Value)) 
     && FtpServer::vsftpd_installed) {
     FtpServer::vsftpd_edit = false;
     return `pureftpd;
  }
  if ((!FtpServer::vsftpd_edit) && ((boolean) UI::QueryWidget (`id("vs_item"), `Value)) 
     && FtpServer::pureftpd_installed) {
     FtpServer::vsftpd_edit = true;
     return `vsftpd;
  }

}

/**
 * Init function for start-up
 * 
 * init starting via xinetd and update status
 */  
void InitStartStopRestart (string key) {

  if ((FtpServer::pure_ftp_xinetd_running) && (!FtpServer::vsftpd_edit)) {
     UI::ReplaceWidget (`id ("_cwm_service_status_rp"), `Label(_("FTP is running")));
     UI::ChangeWidget (`id ("_cwm_start_service_now"), `Enabled, false);
     UI::ChangeWidget (`id ("_cwm_stop_service_now"), `Enabled, true);
     
  }

  if ((FtpServer::vsftp_xinetd_running) && (FtpServer::vsftpd_edit)) {
     UI::ReplaceWidget (`id ("_cwm_service_status_rp"), `Label(_("FTP is running")));
     UI::ChangeWidget (`id ("_cwm_start_service_now"), `Enabled, false);
     UI::ChangeWidget (`id ("_cwm_stop_service_now"), `Enabled, true);
  }
}

/**
 *-----------================= GENERAL SCREEN =============----------
 *
 */

/**
 * Init function "Wellcome Message" for general settings
 * change ValidChars for textentry
 * only vsftpd
 */
void InitBanner(string key) {
  UI::ChangeWidget(`id("Banner"), `Value, FtpServer::ValueUIEdit("Banner"));
}

/**
 * Handle function only save info about changes
 */
symbol HandleUniversal (string key, map event) {
   // modified
  if (event["EventReason"]:"" == "ValueChanged")
      FtpServer::SetModified(true);
  return nil;
}

/**
 * Store function of "Wellcome Message"
 * save values to temporary structure
 * only vsftpd
 */
void StoreBanner (string key, map event) {
  FtpServer::WriteToEditMap("Banner", tostring(UI::QueryWidget(`id("Banner"), `Value)));
}

/**
 * Init function "Chroot Everyone" for general settings
 * check_box
 */
void InitChrootEnable (string key) {
  UI::ChangeWidget(`id( "ChrootEnable" ), `Value, (FtpServer::ValueUIEdit("ChrootEnable") == "YES"));
}

/**
 * Store function of "Chroot Everyone"
 * save values to temporary structure
 */
void StoreChrootEnable (string key, map event) {
  FtpServer::WriteToEditMap("ChrootEnable", (((boolean) UI::QueryWidget(`id("ChrootEnable"), `Value) == true) ? "YES":"NO"));

}

/**
 * Init function "Verbose Logging" for general settings
 * check_box
 */
void InitVerboseLogging (string key) {
  UI::ChangeWidget(`id( "VerboseLogging" ), `Value, (FtpServer::ValueUIEdit("VerboseLogging") == "YES"));
}

/**
 * Store function of "Verbose Logging"
 * save values to temporary structure
 */
void StoreVerboseLogging (string key, map event) {
  FtpServer::WriteToEditMap("VerboseLogging", (((boolean) UI::QueryWidget(`id("VerboseLogging"), `Value) == true) ? "YES":"NO"));
}

/**
 * Init function "Umask (umask files:umask dirs)" for general settings
 * change ValidChars for textentry
 * only pure-ftpd
 */
void InitUmask (string key) {
  UI::ChangeWidget(`id("Umask"), `ValidChars, "01234567:");
  UI::ChangeWidget(`id("Umask"), `Value,  FtpServer::ValueUIEdit("Umask"));
}

/**
 * Valid function of "Umask (umask files:umask dirs)"
 * check value of textentry
 * only pure-ftpd
 */
boolean ValidUmask (string key, map event) {

  string new_umask = (string)UI::QueryWidget (`id("Umask"), `Value);
  if (size(new_umask) > 0) {
     list <string> l = splitstring (new_umask, ":");
     l = filter (string s, l, ``(s != ""));
     if (size(l) < 2) {
      	Popup::Message (_("Not a valid umask."));
	UI::SetFocus(`id("Umask"));
        return false;
     } 
  }
  return true;
}


/**
 * Store function of "Umask (umask files:umask dirs)"
 * save values to temporary structure
 * only pure-ftpd
 */
void StoreUmask (string key, map event) {
  FtpServer::WriteToEditMap("Umask", tostring(UI::QueryWidget(`id("Umask"), `Value)));

}

/**
 * Init function "Umask for Anonymous" for general settings
 * change ValidChars for textentry
 * only vsftpd
 */
void InitUmaskAnon (string key) {
  UI::ChangeWidget(`id( "UmaskAnon" ), `ValidChars, "01234567");
  UI::ChangeWidget(`id( "UmaskAnon" ), `Value,  FtpServer::ValueUIEdit("UmaskAnon"));
}


/**
 * Store function of "Umask for Anonymous"
 * save values to temporary structure
 * only vsftpd
 */
void StoreUmaskAnon (string key, map event) {
  FtpServer::WriteToEditMap("UmaskAnon", tostring(UI::QueryWidget(`id("UmaskAnon"), `Value)));

}


/**
 * Init function "Umask for Authenticated Users" for general settings
 * change ValidChars for textentry
 * only vsftpd
 */
void InitUmaskLocal (string key) {
  UI::ChangeWidget(`id( "UmaskLocal" ),`ValidChars, "01234567");
  UI::ChangeWidget(`id( "UmaskLocal" ), `Value,  FtpServer::ValueUIEdit("UmaskLocal"));
}

/**
 * Store function of "Umask for Authenticated Users"
 * save values to temporary structure
 * only vsftpd
 */
void StoreUmaskLocal (string key, map event) {
  FtpServer::WriteToEditMap("UmaskLocal", tostring(UI::QueryWidget(`id("UmaskLocal"), `Value)));
}

/**
 * Init function of "Ftp Directory for Anonymous Users"
 * textentry
 *
 */
void InitFtpDirAnon (string key) {
  if (FtpServer::EDIT_SETTINGS["VirtualUser"]:nil == "YES") {
     UI::ChangeWidget(`id("FtpDirAnon"), `Enabled, false);
     UI::ChangeWidget(`id ("BrowseAnon"),`Enabled, false);
  } else {
     UI::ChangeWidget(`id("FtpDirAnon"), `Value, FtpServer::ValueUIEdit("FtpDirAnon"));
  }
}


/**
 * Valid function of "Ftp Directory for Anon&ymous Users"
 * check value of textentry
 *
 */
boolean ValidFtpDirAnon (string key, map event) {
  if (!FtpServer::vsftpd_edit) {
     if (FtpServer::EDIT_SETTINGS["VirtualUser"]:nil == "NO") {
        string AnonHomeDir = (string)UI::QueryWidget (`id("FtpDirAnon"), `Value);
        //checking correct homedir for anonymous user 
        if ((AnonHomeDir != "") && (Mode::normal())) {
           if (AnonHomeDir != FtpServer::anon_homedir) {
              string error = Users::EditUser($["homeDirectory":AnonHomeDir]);
              if ((error != nil) && (error != "")) {
                 Popup::Error(error);
	         UI::SetFocus(`id("FtpDirAnon"));
	         return false;
	      }
              integer uid = FtpServer::anon_uid;
              boolean failed = false;
	      map<string,any> ui_map = $[];
              map error_map = $[];
	      do {
	         error_map = Users::CheckHomeUI (uid, AnonHomeDir, ui_map);
	         if (error_map != $[]) {
		    if (!Popup::YesNo (error_map ["question"]:""))
		       failed = true;
		    else
		       ui_map[ error_map["question_id"]:"" ] = AnonHomeDir;
	         }
	      } while (error_map != $[] && !failed);
	   } //end of if (AnonHomeDir != FtpServer::anon_homedir) {
        } //end of if ((AnonHomeDir != "") && (Mode::normal())) {
     } //end of if (FtpServer::EDIT_SETTINGS["VirtualUser"]:nil != "NO") {
  } //end of if (!FtpServer::vsftpd_edit) {
  return true;

}

/**
 * Store function of "Ftp Directory for Anon&ymous Users"
 * save values to temporary structure
 *
 */
void StoreFtpDirAnon (string key, map event) {
 if (FtpServer::EDIT_SETTINGS["VirtualUser"]:nil == "NO")
    FtpServer::WriteToEditMap("FtpDirAnon", tostring(UI::QueryWidget(`id("FtpDirAnon"), `Value)));
}

/**
 * Handle function of "Browse"
 * handling value in textentry of "Umask for Anonynmous Users"
 */
symbol HandleBrowseAnon (string key, map event) {
  any button = event["ID"]:nil;
  if (button == "BrowseAnon") {
     string val = UI::AskForExistingDirectory  ("/",_("Select directory"));
     UI::ChangeWidget(`id( "FtpDirAnon" ), `Value, val);
  }
  return nil;
}

/**
 * Init function of "Ftp Directory for Authenticated Users"
 * textentry
 *
 */
void InitFtpDirLocal (string key) {
  UI::ChangeWidget(`id( "FtpDirLocal" ), `Value, FtpServer::ValueUIEdit("FtpDirLocal"));
}

/**
 * Store function of "Umask for Authenticated Users"
 * save values to temporary structure
 *
 */
void StoreFtpDirLocal (string key, map event) {
  FtpServer::WriteToEditMap("FtpDirLocal", tostring(UI::QueryWidget(`id("FtpDirLocal"), `Value)));
}

/**
 * Handle function of "Browse"
 * handling value in textentry of "Umask for Authenticated Users"
 */
symbol HandleBrowseLocal (string key, map event) {
  any button = event["ID"]:nil;
  if (button == "BrowseLocal") {
     string val = UI::AskForExistingDirectory  ("/",_("Select directory"));
     UI::ChangeWidget(`id( "FtpDirLocal" ), `Value, val);
  }
  return nil;
}


/**
 *-----------================= PERFORMANCE SCREEN =============----------
 *
 */

/**
 * Init function of "Max Idle Time [minutes]"
 * intfield
 *
 */
void InitMaxIdleTime (string key) {
  UI::ChangeWidget(`id("MaxIdleTime"), `Value, tointeger(FtpServer::ValueUIEdit("MaxIdleTime")));
}

/**
 * Store function of "Max Idle Time [minutes]"
 * save values to temporary structure
 *
 */
void StoreMaxIdleTime (string key, map event) {
  FtpServer::WriteToEditMap("MaxIdleTime", tostring(UI::QueryWidget(`id("MaxIdleTime"), `Value)));
}


/**
 * Init function of "Max Clients for One IP"
 * intfield
 *
 */
void InitMaxClientsPerIP (string key) {
  UI::ChangeWidget(`id("MaxClientsPerIP"), `Value, tointeger(FtpServer::ValueUIEdit("MaxClientsPerIP")));
}

/**
 * Store function of "Max Clients for One IP"
 * save values to temporary structure
 *
 */
void StoreMaxClientsPerIP (string key, map event) {
  FtpServer::WriteToEditMap("MaxClientsPerIP", tostring(UI::QueryWidget(`id("MaxClientsPerIP"), `Value)));
}


/**
 * Init function of "Max Clients"
 * intfield
 *
 */
void InitMaxClientsNumber (string key) {
  UI::ChangeWidget(`id("MaxClientsNumber"), `Value, tointeger(FtpServer::ValueUIEdit("MaxClientsNumber")));
}

/**
 * Store function of "Max Clients"
 * save values to temporary structure
 *
 */
void StoreMaxClientsNumber (string key, map event) {
  FtpServer::WriteToEditMap("MaxClientsNumber", tostring(UI::QueryWidget(`id("MaxClientsNumber"), `Value)));
}


/**
 * Init function of "Local Max Rate [KB/s]"
 * intfield
 *
 */
void InitLocalMaxRate (string key) {
  UI::ChangeWidget(`id("LocalMaxRate"), `Value, tointeger(FtpServer::ValueUIEdit("LocalMaxRate")));
}

/**
 * Store function of "Local Max Rate [KB/s]"
 * save values to temporary structure
 *
 */
void StoreLocalMaxRate (string key, map event) {
  FtpServer::WriteToEditMap("LocalMaxRate", tostring(UI::QueryWidget(`id("LocalMaxRate"), `Value)));
}

/**
 * Init function of "Anonymous Max Rate [KB/s]"
 * intfield
 *
 */
void InitAnonMaxRate (string key) {
  UI::ChangeWidget(`id("AnonMaxRate"), `Value, tointeger(FtpServer::ValueUIEdit("AnonMaxRate")));
}

/**
 * Store function of "Anonymous Max Rate [KB/s]"
 * save values to temporary structure
 *
 */
void StoreAnonMaxRate (string key, map event) {
  FtpServer::WriteToEditMap("AnonMaxRate", tostring(UI::QueryWidget(`id("AnonMaxRate"), `Value)));
}


/**
 *-----------================= Authentication SCREEN =============----------
 *
 */

/**
 * Init function of "Enable/Disable Anonymous and Local Users"
 * radiobuttongroup
 *
 */
void InitAnonAuthen (string key) {
  integer authentication = tointeger(FtpServer::ValueUIEdit("AnonAuthen"));
  if (authentication == 0) { // anonymous only
     UI::ChangeWidget(`id("AnonAuthen"), `Value, "anon_only");
  } else if (authentication == 1) { //authenticated only
     UI::ChangeWidget(`id("AnonAuthen"), `Value, "local_only");
  } else { //both
     UI::ChangeWidget(`id("AnonAuthen"), `Value, "both");
  }
}

/**
 * Store function of "Enable/Disable Anonymous and Local Users"
 * save value to temporary structure
 *
 */
void StoreAnonAuthen (string key, map event) {
  string radiobut = (string) UI::QueryWidget(`id("AnonAuthen"), `Value);
  if (radiobut == "anon_only") {
     FtpServer::WriteToEditMap("AnonAuthen", "0");
  } else if (radiobut == "local_only") {
     FtpServer::WriteToEditMap("AnonAuthen", "1");
  } else {
     FtpServer::WriteToEditMap("AnonAuthen", "2");
  } 
}


/**
 * Init function of "Enable Upload"
 * checkbox
 *
 */
void InitEnableUpload (string key) {
  UI::ChangeWidget(`id( "EnableUpload" ), `Notify, true);
  if (FtpServer::ValueUIEdit("EnableUpload") == "YES") {
     UI::ChangeWidget(`id( "EnableUpload" ), `Value, true);
     UI::ChangeWidget(`id("AnonReadOnly"), `Enabled, true);
     UI::ChangeWidget(`id( "AnonCreatDirs" ),`Enabled, true);
  } else {
     UI::ChangeWidget(`id( "EnableUpload" ), `Value, false);
     UI::ChangeWidget(`id("AnonReadOnly"), `Enabled, false);
     UI::ChangeWidget(`id( "AnonCreatDirs" ),`Enabled, false); 
  }
}


/**
 * Handle function of "Enable Upload"
 * handling value and ask for creation upload directory
 * function also disable/enable "Anon&ymous Can Upload" and 
 * "Anonymou&s Can Create Directories"
 */
symbol HandleEnableUpload (string key, map event) {
  any button = event["ID"]:nil;
  //Popup::Message("Hello world");
  if (Mode::normal()) {   
     boolean anon_upload = false;
     boolean anon_create_dirs = false;
     string yesno_comment ="";
     string yesno_question ="";
     boolean check_upload = (boolean) UI::QueryWidget(`id("EnableUpload"), `Value);
     if (button == "EnableUpload") {        
        if (check_upload) {
           UI::ChangeWidget(`id("AnonReadOnly"), `Enabled, true);
           UI::ChangeWidget(`id( "AnonCreatDirs" ),`Enabled, true); 
        } else {
	   UI::ChangeWidget(`id("AnonReadOnly"), `Enabled, false);
	   UI::ChangeWidget(`id( "AnonCreatDirs" ),`Enabled, false);
        }
     } // end of if (button == "EnableUpload") {

     anon_upload = (boolean) UI::QueryWidget(`id("AnonReadOnly"), `Value);
     anon_create_dirs = (boolean) UI::QueryWidget(`id("AnonCreatDirs"), `Value);

     if (((button ==  "AnonReadOnly") || (anon_upload) && (check_upload)) && (ask_again)) {
        if (!FtpServer::create_upload_dir) { 
           yesno_question =sformat(_("Create the \"upload\" directory in %1\n"), FtpServer::anon_homedir);
	   yesno_question = yesno_question + _("and enable write access?\n");
           yesno_comment = _("If you want anonymous users to be able to upload,
 you need to create a directory with write access.

");
           yesno_comment = yesno_comment + FtpServer::anon_homedir + _(" is a home directory after the login of anonymous users.");
           FtpServer::create_upload_dir = Popup::YesNoHeadline(yesno_question, yesno_comment);
           ask_again = FtpServer::create_upload_dir;
           FtpServer::upload_good_permission = true;
        } else if (!FtpServer::upload_good_permission) {
           yesno_question = _("Do you want to change permissions
for
") + FtpServer::anon_homedir +_("Upload (allow writing)?");
           yesno_comment = _("To allow anonymous users to upload, you need a directory with write access.

");
           yesno_comment = yesno_comment + FtpServer::anon_homedir + _(" is a home directory after the login of anonymous users.");
           FtpServer::upload_good_permission = Popup::YesNoHeadline(yesno_question, yesno_comment);
           ask_again = FtpServer::upload_good_permission;
        }
        
     }

     if (((button ==  "AnonCreatDirs") || (anon_create_dirs) && (check_upload)) && (ask_again)) {
        if (!FtpServer::create_upload_dir) {  
           yesno_question = _("Do you want to create a directory?\n") + FtpServer::anon_homedir +_("Upload with write access?");
           yesno_comment = _("If you want to allow anonymous users to create directories,
 you have to create a directory with write access.

");
           yesno_comment = yesno_comment + FtpServer::anon_homedir + _(" is a home directory after the login of anonymous users.");
           FtpServer::create_upload_dir = Popup::YesNoHeadline(yesno_question, yesno_comment);
           ask_again = FtpServer::create_upload_dir;
           FtpServer::upload_good_permission = true;
        } else if (!FtpServer::upload_good_permission) {
           yesno_question = _("Do you want to change permissions
for
") + FtpServer::anon_homedir +_("Upload (allow writing)?");
           yesno_comment = _("If you want anonymous users to be able to create directories,
 you need a directory with write access.

");
           yesno_comment = yesno_comment + FtpServer::anon_homedir + _(" is a home directory after the login of anonymous users.");
           FtpServer::upload_good_permission = Popup::YesNoHeadline(yesno_question, yesno_comment);
           ask_again = FtpServer::upload_good_permission;
        }
     }
  } // end of if (Mode::normal()) {
  // modified
  if (event["EventReason"]:"" == "ValueChanged")
     FtpServer::SetModified(true);
}

/**
 * Store function of "Enable Upload"
 * save value to temporary structure
 *
 */
void StoreEnableUpload (string key, map event) {
  FtpServer::WriteToEditMap("EnableUpload", 
    (((boolean) UI::QueryWidget(`id("EnableUpload"), `Value) == true) ? "YES":"NO"));
}



/**
 * Init function of "Anonymous Can Upload"
 * checkbox
 *
 */
void InitAnonReadOnly (string key) {
  UI::ChangeWidget(`id( "AnonReadOnly" ), `Value, 
    (FtpServer::ValueUIEdit("AnonReadOnly") == "NO"));
}

/**
 * Handle function of "Anonymous Can Upload"
 * check permissions for upload dir
 *
 */
symbol  HandleAnonReadOnly (string key, map event) {
  string yesno_comment ="";
  string yesno_question ="";
  boolean result = false;
  boolean enable = (boolean) UI::QueryWidget(`id("AnonReadOnly"), `Value);

  if (enable) {

     if (!FtpServer::vsftpd_edit) {
     
        if (FtpServer::pure_ftp_allowed_permissios_upload == 0) {
           yesno_question = sformat(_("Change permissions of %1 ?\n"), FtpServer::anon_homedir);
           yesno_comment = sformat(_("If you want to allow uploads for \"anonymous\" users, \nyou need a directory with write access for them."));
	   result = Popup::YesNoHeadline(yesno_question, yesno_comment);
           if (result) {
              FtpServer::pure_ftp_allowed_permissios_upload = 1;
              FtpServer::change_permissions = true;
           } else {
              FtpServer::pure_ftp_allowed_permissios_upload = -1;
              FtpServer::change_permissions = false;
           }           
        } //end of if (FtpServer::pure_ftp_allowed_permissios_upload == 0)

     } else {

        if (FtpServer::pure_ftp_allowed_permissios_upload == 1) {
           yesno_question = sformat(_("Change permissions of %1 ?\n"), FtpServer::anon_homedir);
           yesno_comment = sformat(_("For anonymous connections the home directory of an anonymous user should have no write access.
"));
	   result = Popup::YesNoHeadline(yesno_question, yesno_comment);
           if (result) {
              FtpServer::pure_ftp_allowed_permissios_upload = 0;
              FtpServer::change_permissions = true;
           } else {
              FtpServer::pure_ftp_allowed_permissios_upload = -1;
              FtpServer::change_permissions = false;
           }           
        } //end of if (FtpServer::pure_ftp_allowed_permissios_upload == 1)
     } //end else for if if (!FtpServer::vsftpd_edit) {
  } // end of if (enable) {
  // modified
  if (event["EventReason"]:"" == "ValueChanged")
     FtpServer::SetModified(true);
}

/**
 * Store function of "Anonymous Can Upload"
 * save value to temporary structure
 *
 */
void StoreAnonReadOnly (string key, map event) {
  FtpServer::WriteToEditMap("AnonReadOnly", 
    (((boolean) UI::QueryWidget(`id("AnonReadOnly"), `Value) == true) ? "NO":"YES"));
}

/**
 * Init function of "Anonymous Can Create Directories"
 * checkbox
 *
 */
void InitAnonCreatDirs (string key) {
  UI::ChangeWidget(`id( "AnonCreatDirs" ), `Value, 
    (FtpServer::ValueUIEdit("AnonCreatDirs") == "YES"));
}

/**
 * Handle function of "Anonymous Can Create Directories"
 * check permissions for upload dir
 *
 */
symbol  HandleAnonCreatDirs (string key, map event) {
  string yesno_comment ="";
  string yesno_question ="";
  boolean result = false;
  boolean enable = (boolean) UI::QueryWidget(`id("AnonReadOnly"), `Value);

  if (enable) {

     if (!FtpServer::vsftpd_edit) {
     
        if (FtpServer::pure_ftp_allowed_permissios_upload == 0) {
           yesno_question = sformat(_("Change permissions of %1 ?\n"), FtpServer::anon_homedir);
           yesno_comment = sformat(_("If you want to allow uploads for \"anonymous\" users, \nyou need a directory with write access for them."));
	   result = Popup::YesNoHeadline(yesno_question, yesno_comment);
           if (result) {
              FtpServer::pure_ftp_allowed_permissios_upload = 1;
              FtpServer::change_permissions = true;
           } else {
              FtpServer::pure_ftp_allowed_permissios_upload = -1;
              FtpServer::change_permissions = false;
           }           
        } //end of if (FtpServer::pure_ftp_allowed_permissios_upload == 0)

     } else {

        if (FtpServer::pure_ftp_allowed_permissios_upload == 1) {
           yesno_question = sformat(_("Change permissions of %1 ?\n"), FtpServer::anon_homedir);
           yesno_comment = sformat(_("For anonymous connections the home directory of an anonymous user should have no write access."));
	   result = Popup::YesNoHeadline(yesno_question, yesno_comment);
           if (result) {
              FtpServer::pure_ftp_allowed_permissios_upload = 0;
              FtpServer::change_permissions = true;
           } else {
              FtpServer::pure_ftp_allowed_permissios_upload = -1;
              FtpServer::change_permissions = false;
           }           
        } //end of if (FtpServer::pure_ftp_allowed_permissios_upload == 1)
     } //end else for if if (!FtpServer::vsftpd_edit) {
  } // end of if (enable) {
  // modified
  if (event["EventReason"]:"" == "ValueChanged")
     FtpServer::SetModified(true);
}

/**
 * Store function of "Anonymous Can Create Directories"
 * save value to temporary structure
 *
 */
void StoreAnonCreatDirs (string key, map event) {
  FtpServer::WriteToEditMap("AnonCreatDirs", 
    (((boolean) UI::QueryWidget(`id("AnonCreatDirs"), `Value) == true) ? "YES":"NO"));
}


/**
 *-----------================= EXPERT SETTINGS SCREEN =============----------
 *
 */


/**
 * Init function of "Enable Passive Mode"
 * checkbox
 *
 * also include handling enable/disable Min and Max Ports
 * handling intfields
 */
void InitPassiveMode (string key) {
  UI::ChangeWidget(`id("PassiveMode"), `Notify, true);
  UI::ChangeWidget(`id("PassiveMode"), `Value, (FtpServer::ValueUIEdit("PassiveMode") == "YES"));
}


/**
 * Handle function of "Enable Passive Mode"
 * handling enable/disable widgets
 */
symbol HandlePassiveMode (string key, map event) {  
  boolean value = (boolean) UI::QueryWidget(`id("PassiveMode"), `Value);
  if (value) {
     UI::ChangeWidget(`id("PasMinPort"), `Enabled, true);
     UI::ChangeWidget(`id("PasMaxPort"), `Enabled, true);
  } else {
     UI::ChangeWidget(`id("PasMinPort"), `Enabled, false);
     UI::ChangeWidget(`id("PasMaxPort"), `Enabled, false);
  }
  // modified
  if (event["EventReason"]:"" == "ValueChanged")
     FtpServer::SetModified(true);
}

/**
 * Store function of "Enable Passive Mode"
 * save values to temporary structure
 *
 */
void StorePassiveMode (string key, map event) {
  FtpServer::WriteToEditMap("PassiveMode", (((boolean) UI::QueryWidget(`id("PassiveMode"), `Value) == true) ? "YES":"NO"));
  
}

/**
 * Init function of "Min Port for Pas. Mode"
 * intfield
 *
 */
void InitPasMinPort (string key) {
  UI::ChangeWidget(`id("PasMinPort"), `Value, tointeger(FtpServer::ValueUIEdit("PasMinPort")));
}

/**
 * Store function of "Min Port for Pas. Mode"
 * save values to temporary structure
 *
 */
void StorePasMinPort (string key, map event) {
  FtpServer::WriteToEditMap("PasMinPort", tostring(UI::QueryWidget(`id("PasMinPort"), `Value)));
  FtpServer::WriteToEditMap("PassiveMode", (((boolean) UI::QueryWidget(`id("PassiveMode"), `Value) == true) ? "YES":"NO"));
}

/**
 * Init function of "Max Port for Pas. Mode"
 * intfield
 *
 */
void InitPasMaxPort (string key) {
  UI::ChangeWidget(`id("PasMaxPort"), `Value, tointeger(FtpServer::ValueUIEdit("PasMaxPort")));

}

/**
 * Valid function of "Max Port for Pas. Mode"
 * check values Max Port >= Min Port
 *
 */
boolean ValidPasMaxPort (string key, map event) {
  integer min_port = tointeger(UI::QueryWidget (`id("PasMinPort"), `Value));
  integer max_port = tointeger(UI::QueryWidget (`id("PasMaxPort"), `Value));
    
  if (min_port > max_port) {
     Popup::Message (_("Condition for ports is max port > min port."));
     UI::SetFocus(`id("PasMinPort"));
     return false;
  }
  return true;
}

/**
 * Store function of "Max Port for Pas. Mode"
 * save values to temporary structure
 *
 */
void StorePasMaxPort (string key, map event) {
  FtpServer::WriteToEditMap("PasMaxPort", tostring(UI::QueryWidget(`id("PasMaxPort"), `Value)));
}

/**
 * Init function of "Enable SSL"
 * checkbox
 *
 * also include handling enable/disable SSL v2/3/TLS and Certificate
 * handling checkboxes and textentry
 */
void InitSSLEnable (string key) {
  UI::ChangeWidget(`id("SSLEnable"), `Notify, true);
  UI::ChangeWidget(`id("SSLEnable"), `Value, (FtpServer::ValueUIEdit("SSLEnable") == "YES"));
}

/**
 * Handle function of "Enable SSL"
 * handling enable/disable widgets"
 */
symbol HandleSSLEnable (string key, map event) {
  boolean value = (boolean) UI::QueryWidget(`id("SSLEnable"), `Value);
  if (value) {
     UI::ChangeWidget(`id("SSLv2"), `Enabled, true);
     UI::ChangeWidget(`id("SSLv3"), `Enabled, true);
     UI::ChangeWidget(`id("TLS"), `Enabled, true);
     UI::ChangeWidget(`id("CertFile"), `Enabled, true);
     UI::ChangeWidget(`id("BrowseCertFile"), `Enabled, true);
  } else {
     UI::ChangeWidget(`id("SSLv2"), `Enabled, false);
     UI::ChangeWidget(`id("SSLv3"), `Enabled, false);
     UI::ChangeWidget(`id("TLS"), `Enabled, false);
     UI::ChangeWidget(`id("CertFile"), `Enabled, false);
     UI::ChangeWidget(`id("BrowseCertFile"), `Enabled, false);
  }
  // modified
  if (event["EventReason"]:"" == "ValueChanged")
      FtpServer::SetModified(true);
}


/**
 * Store function of "Enable SSL"
 * save values to temporary structure
 *
 */
void StoreSSLEnable (string key, map event) {
  FtpServer::WriteToEditMap("SSLEnable", (((boolean) UI::QueryWidget(`id("SSLEnable"), `Value) == true) ? "YES":"NO"));
  
}

/**
 * Init function of "Enable SSL v2"
 * intfield
 *
 * also include handling enable/disable SSL
 * handling checkboxframe
 */
void InitSSLv2 (string key) {
  UI::ChangeWidget(`id("SSLv2"), `Value, (FtpServer::ValueUIEdit("SSLv2") == "YES"));
  UI::ChangeWidget(`id("SSLEnable"), `Value, (FtpServer::ValueUIEdit("SSLEnable") == "YES"));
}

/**
 * Store function of "Enable SSL v2"
 * save values to temporary structure
 *
 * also include handling value enable/disable passive mode
 */
void StoreSSLv2 (string key, map event) {
  FtpServer::WriteToEditMap("SSLv2", 
    (((boolean) UI::QueryWidget(`id("SSLv2"), `Value) == true) ? "YES":"NO"));
  FtpServer::WriteToEditMap("SSLEnable", 
    (((boolean) UI::QueryWidget(`id("SSLEnable"), `Value) == true) ? "YES":"NO"));
  
}

/**
 * Init function of "Enable SSL v3"
 * intfield
 *
 */
void InitSSLv3 (string key) {
  UI::ChangeWidget(`id("SSLv3"), `Value, (FtpServer::ValueUIEdit("SSLv3") == "YES"));
}

/**
 * Store function of "Enable SSL v3"
 * save value to temporary structure
 *
 */
void StoreSSLv3 (string key, map event) {
  FtpServer::WriteToEditMap("SSLv3", 
    (((boolean) UI::QueryWidget(`id("SSLv3"), `Value) == true) ? "YES":"NO"));
}

/**
 * Init function of "Enable TLS"
 * intfield
 *
 */
void InitTLS (string key) {
  UI::ChangeWidget(`id("TLS"), `Value, (FtpServer::ValueUIEdit("TLS") == "YES"));
}

/**
 * Store function of "Enable TLS"
 * save value to temporary structure
 *
 */
void StoreTLS (string key, map event) {
  FtpServer::WriteToEditMap("TLS", 
    (((boolean) UI::QueryWidget(`id("TLS"), `Value) == true) ? "YES":"NO"));
}

/**
 * Init function of "DSA Certificate to Use for SSL Encrypted Connections"
 * intfield
 *
 */
void InitCertFile (string key) {
  UI::ChangeWidget(`id( "CertFile" ), `Value, FtpServer::ValueUIEdit("CertFile"));
}

/**
 * Valid function of "DSA Certificate to Use for SSL Encrypted Connections"
 * check value if user enable SSL Certificate (textentry) doesn't be empty
 *
 */
boolean ValidCertFile (string key, map event) {
  string rsa_cert = tostring(UI::QueryWidget(`id("CertFile"), `Value));
  boolean ssl_enable = (boolean) UI::QueryWidget(`id("SSLEnable"), `Value);

  if (((rsa_cert == "")||(rsa_cert ==nil)) && (ssl_enable)) {
     Popup::Error(_("DSA certificate is missing."));
     UI::SetFocus(`id("CertFile"));
     return false;
  }

  return true;

}

/**
 * Store function of "DSA Certificate to Use for SSL Encrypted Connections"
 * save value to temporary structure
 *
 */
void StoreCertFile (string key, map event) {
  FtpServer::WriteToEditMap("CertFile", tostring(UI::QueryWidget(`id("CertFile"), `Value)));
}

/**
 * Handle function of "Browse"
 * handling value in textentry of "DSA Certificate to Use for SSL Encrypted Connections"
 */
symbol HandleBrowseCertFile (string key, map event) {
  any button = event["ID"]:nil;
  if (button == "BrowseCertFile") {
     string val = UI::AskForExistingFile  ("/","*.*",_("Select File"));
     UI::ChangeWidget(`id( "CertFile" ), `Value, val);
  }
}

/**
 * Init function of "Disable Downloading Unvalidated Data"
 * checkbox
 *
 */
void InitAntiWarez (string key) {
  UI::ChangeWidget(`id( "AntiWarez" ), `Value, 
     (FtpServer::ValueUIEdit("AntiWarez") == "YES"));
}

/**
 * Store function of "Disable Downloading Unvalidated Data"
 * save value to temporary structure
 *
 */
void StoreAntiWarez (string key, map event) {
  FtpServer::WriteToEditMap("AntiWarez", 
    (((boolean) UI::QueryWidget(`id("AntiWarez"), `Value) == true) ? "YES":"NO"));
}

/**
 * Init function of "Security Settings"
 * checkbox
 *
 */
void InitSSL (string key) {
 integer security = tointeger(FtpServer::ValueUIEdit("SSL"));
  if (security == 0) { // anonymous only
     UI::ChangeWidget(`id("SSL"), `Value, "disable");
  } else if (security == 1) { //authenticated only
     UI::ChangeWidget(`id("SSL"), `Value, "accept");
  } else { //both
     UI::ChangeWidget(`id("SSL"), `Value, "refuse");
  }
}

/**
 * Valid function of "Security Settings"
 * check of existing certificate
 *
 */
boolean ValidSSL (string key, map event) {
  string current = (string) UI::QueryWidget(`id("SSL"), `Value);
  if ((!FileUtils::Exists("/etc/ssl/private/pure-ftpd.pem")) && 
     ((current == "accept") || (current == "refuse"))) {
     Popup::Error(_("The <tt>/etc/ssl/private/pure-ftpd.pem</tt> certificate for the SSL connection is missing."));
     return false;
  }
  return true;
}

/**
 * Store function of "Security Settings"
 * save value to temporary structure
 *
 */
void StoreSSL (string key, map event) {
  string radiobut = (string) UI::QueryWidget(`id("SSL"), `Value);
  if (radiobut == "disable") {
     FtpServer::WriteToEditMap("SSL", "0");
  } else if (radiobut == "accept") {
     FtpServer::WriteToEditMap("SSL", "1");
  } else {
     FtpServer::WriteToEditMap("SSL", "2");
  } 
}

}
