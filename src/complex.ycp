/**
 * File:	include/ftpd/complex.ycp
 * Package:	Configuration of ftpd
 * Summary:	Dialogs definitions
 * Authors:	Jozef Uhliarik <juhliarik@suse.cz>
 *
 * $Id: complex.ycp 29363 2006-03-24 08:20:43Z juhliarik $
 */

{

textdomain "ftp-server";

import "Label";
import "Popup";
import "Wizard";
import "Wizard_hw";
import "Confirm";
import "FtpServer";
import "Package";
import "Service";
include "ftp-server/helps.ycp";

/**
 * Return a modification status
 * @return true if data was modified
 */
boolean Modified() {
    return FtpServer::Modified();
}

boolean ReallyAbort() {
    return !FtpServer::Modified() || Popup::ReallyAbort(true);
}

boolean PollAbort() {
    return UI::PollInput() == `abort;
}


/**
 * Init settings dialog (select the daemon)
 *
 * @return boolean successfull
 */

boolean ReadFTPService () {


  //Checking if ftp daemons are installed
  integer rad_but = 0;
  integer vsftpd_init_count = 0;
  integer pureftpd_init_count = 0;
  any ret = nil;
  boolean vs_package_available = false;
  boolean pure_package_available = false;

  
  if (Package::Installed("vsftpd")) {
     vsftpd_init_count = vsftpd_init_count + 1;
     FtpServer::vsftpd_installed = true;
  }

  if (Package::Installed("pure-ftpd")) {
     pureftpd_init_count = pureftpd_init_count + 1;
     FtpServer::pureftpd_installed = true;
  }

  
  if ((vsftpd_init_count == 0) && (pureftpd_init_count == 0)) {
     vs_package_available = Package::Available("vsftpd");
     pure_package_available = Package::Available("pure-ftpd");
     if ((!vs_package_available)&&(!pure_package_available)) {
        Popup::Error(_("Packages for vsftpd and pure-ftpd are not available."));
        y2error("[ftp-server] (ReadFTPService ()) Packages for vsftpd and pure-ftpd are not available.");
        return false;
     }


     UI::OpenDialog(
       `RadioButtonGroup(`id("IntstallFTPd"), 
	 `VBox(
           `Heading (_("No server package installed")),
	   `Left(`Label(_("Please choose an ftp daemon."))),
	   `Left(`Label(_("Press Cancel to cancel the configuration of the ftp."))),
	   `Left(`RadioButton(`id(0), `opt(`notify), _("&vsftpd"), true)),
	   `Left(`RadioButton(`id(1), `opt(`notify), _("&pure-ftpd"))),
	   `ButtonBox(
	     `PushButton(`id(`accept), Label::OKButton()),
	     `PushButton(`id(`cancel), Label::CancelButton())
           )
	 ) // end of `VBox(
       ) //end of `RadioButtonGroup(`id("IntstallFTPd")
     ); // end of UI::OpenDialog(
     if (!vs_package_available) {
        UI::ChangeWidget(`id(0),`Enabled, false);
        UI::ChangeWidget(`id(1),`Value, true);
     }

     if (!pure_package_available) {
        UI::ChangeWidget(`id(1),`Enabled, false);
        UI::ChangeWidget(`id(0),`Value, true);
     }
     integer install = 0;
     while (true) {
       ret = UI::UserInput();
       if ( ret == `accept ) {
          install = (integer) UI::QueryWidget(`id("IntstallFTPd"), `CurrentButton);
	  break;
       } else if (ret == `cancel) {
          UI::CloseDialog();
	  y2milestone("[ftp-server] Installation was aborted");
          return false;
       }

     };
     UI::CloseDialog();
     any result = nil;
     list <string> daemon_list = [];
     string daemon = "";
     if (install == 0) {
        daemon = "vsftpd";
        daemon_list = add(daemon_list, daemon);
        result = vs_package_available;
     } else {
        daemon = "pure-ftpd";
        daemon_list = add(daemon_list, daemon);
        result = pure_package_available;
     }
     //result = Package::Available(daemon);
     if (result == true) {
        result = Package::DoInstall(daemon_list);
        if (result == false) {
  	   Popup::Error(_("Installation failed."));
           y2milestone("[ftp-server] Installation failed");
	   return false;
	}
	if (daemon == "pure-ftpd") {
           FtpServer::pureftpd_installed = true;
           pureftpd_init_count = pureftpd_init_count + 1;
        } else {
	   FtpServer::vsftpd_installed = true; 
 	   vsftpd_init_count = vsftpd_init_count + 1;
        }
     } else if (result == false) {
	Popup::Error(_("Package for ftp is not available."));
	y2milestone("[ftp-server] Package for ftp is not available");
	return false;
     } else if (result == nil) {
        Popup::Error(_("Package not found"));
	y2milestone("[ftp-server] Package was not found");
	return false;
     } 	           
  }; //end of if ((vsftpd_init_count == 0) && (pureftpd_init_count == 0)) {

  //Checking Enabled services for ftp daemons

  if (Service::Enabled("pure-ftpd")) 
     pureftpd_init_count = pureftpd_init_count + 1;

  if (Service::Enabled("vsftpd")) 
     vsftpd_init_count = vsftpd_init_count + 1;

  //Checking status of ftp daemons

  if (Service::Status("vsftpd") == 0) {
     FtpServer::vsftpd_edit = true;
     vsftpd_init_count = vsftpd_init_count + 1;
  } else {
     FtpServer::vsftpd_edit = false;
  }

  if (Service::Status("pure-ftpd") == 0) {
     FtpServer::vsftpd_edit = false;
     pureftpd_init_count = pureftpd_init_count + 1;
  } else {
     FtpServer::vsftpd_edit = true;
  }

  // open dialog for choosing ftp daemon  

  if ((pureftpd_init_count == vsftpd_init_count) && 
     (FtpServer::pureftpd_installed) && (FtpServer::vsftpd_installed)) {
     UI::OpenDialog(
       `RadioButtonGroup(`id(`rb), `VBox(
	 `Label(_("Choose daemon?")),
	 `Left(`RadioButton(`id(0), `opt(`notify), _("&vsftpd"), ((FtpServer::vsftpd_edit)? true:false))),
	 `Left(`RadioButton(`id(1), `opt(`notify), _("&pure-ftpd"), ((FtpServer::vsftpd_edit)? false:true))),
	 `ButtonBox(
	   `PushButton(`id(`close), Label::OKButton()),
	   `PushButton(`id(`abort), Label::CancelButton())
	 )
       )) //end of `RadioButtonGroup(`id(`rb), `VBox(
     ); //end of UI::OpenDialog(
    
     while (true) {
       ret = UI::UserInput();
       if (ret == `close) {
	  rad_but = (integer) UI::QueryWidget(`id(`rb), `CurrentButton);
	  break;
       } else if (ret == `abort) {
         return false;
       }
     } //end of  while (true) {
    
     if (rad_but == 0)
	FtpServer::vsftpd_edit = true;
     else
	FtpServer::vsftpd_edit = false;
    
     y2milestone("[ftp-server] Terminating by the radiobutom ID '%1'", rad_but);
    
     UI::CloseDialog();
  } else { //end of if (pureftpd_init_count == vsftpd_init_count) {
    if ((FtpServer::pureftpd_installed) && (!FtpServer::vsftpd_installed))
       FtpServer::vsftpd_edit = false;
    if ((!FtpServer::pureftpd_installed) && (FtpServer::vsftpd_installed))
       FtpServer::vsftpd_edit = true;
  }
  return true;
}



/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol ReadDialog() {
    Wizard::RestoreHelp(HELPS["read"]:"");
    // FtpServer::AbortFunction = PollAbort;
    boolean result = ReadFTPService ();
    if (!result) return `abort;
    if (!Confirm::MustBeRoot()) return `abort;
    boolean ret = FtpServer::Read();
    if (((FtpServer::vsftpd_edit) && (ret)) || ((!FtpServer::vsftpd_edit) && (ret)))
       return `next;
    else
       return `abort;
    
    //return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol WriteDialog() {
    Wizard::RestoreHelp(HELPS["write"]:"");
    // FtpServer::AbortFunction = PollAbort;
    boolean ret = FtpServer::Write();
    return ret ? `next : `abort;
}



/* EOF */
}
